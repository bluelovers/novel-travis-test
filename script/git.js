"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const moment = require("moment");
const path = require("upath2");
const crlf_normalize_1 = require("crlf-normalize");
const gitlog2_1 = require("gitlog2");
const __1 = require("..");
const index_1 = require("../index");
const log_1 = require("../lib/log");
const share_1 = require("../lib/share");
const util_1 = require("../lib/util");
const cross_spawn_1 = require("./git/cross-spawn");
const lib_1 = require("./git/lib");
const util_2 = require("./git/util");
const init_1 = require("./init");
__export(require("./git/lib"));
__export(require("./git/util"));
exports.DATE_FORMAT = 'YYYY-MM-DD-HH-mm-ss';
function pullGit(REPO_PATH) {
    return __1.crossSpawnSync('git', [
        'pull',
    ], {
        stdio: 'inherit',
        cwd: REPO_PATH,
    });
}
exports.pullGit = pullGit;
function fetchGit(REPO_PATH, remote) {
    return cross_spawn_1.crossSpawnSyncGit('git', [
        'fetch',
        '--force',
        remote || 'origin',
        'master',
    ], {
        stdio: 'inherit',
        cwd: REPO_PATH,
    });
}
exports.fetchGit = fetchGit;
function fetchGitAll(REPO_PATH) {
    return cross_spawn_1.crossSpawnSyncGit('git', [
        'fetch',
        '--all',
        '--prune',
    ], {
        stdio: 'inherit',
        cwd: REPO_PATH,
    });
}
exports.fetchGitAll = fetchGitAll;
function newBranch(REPO_PATH, BR_NAME) {
    log_1.default.debug(`嘗試建立新分支 ${BR_NAME}`);
    return __1.crossSpawnSync('git', [
        'checkout',
        '-B',
        BR_NAME,
        'origin/master',
    ], {
        stdio: 'inherit',
        cwd: REPO_PATH,
    });
}
exports.newBranch = newBranch;
function currentBranchName(REPO_PATH) {
    let cp = __1.crossSpawnSync('git', [
        'rev-parse',
        '--abbrev-ref',
        'HEAD',
    ], {
        cwd: REPO_PATH,
    });
    let name = index_1.crossSpawnOutput(cp.stdout);
    return name;
}
exports.currentBranchName = currentBranchName;
function deleteBranch(REPO_PATH, name, force) {
    if (name == 'master' || !name) {
        throw new Error();
    }
    log_1.default.debug(`嘗試刪除本地分支 ${name}`);
    return __1.crossSpawnSync('git', [
        'branch',
        force ? '-D' : '-d',
        name,
    ], {
        stdio: 'inherit',
        cwd: REPO_PATH,
    });
}
exports.deleteBranch = deleteBranch;
/**
 * @FIXME 不知道為什麼沒有刪除 所以多做一次另外一種刪除步驟
 */
function deleteBranchRemote(REPO_PATH, remote, name, force) {
    if (name == 'master' || !name || !remote) {
        throw new Error();
    }
    log_1.default.debug(`嘗試刪除遠端分支 ${name}`);
    __1.crossSpawnSync('git', [
        'push',
        remote,
        '--delete',
        name,
    ], {
        stdio: 'inherit',
        cwd: REPO_PATH,
    });
    /**
     * 不知道為什麼沒有刪除 所以多做一次另外一種刪除步驟
     * https://zlargon.gitbooks.io/git-tutorial/content/remote/delete_branch.html
     */
    __1.crossSpawnSync('git', [
        'push',
        remote,
        ':' + name,
    ], {
        stdio: 'inherit',
        cwd: REPO_PATH,
    });
}
exports.deleteBranchRemote = deleteBranchRemote;
function oldBranch(REPO_PATH) {
    let name = currentBranchName(REPO_PATH);
    if (name.indexOf('auto/') == 0) {
        return name;
    }
    return null;
}
exports.oldBranch = oldBranch;
function diffOrigin(REPO_PATH) {
    let log = gitlog2_1.default({
        repo: REPO_PATH,
        branch: [currentBranchName(REPO_PATH), 'origin/master'].join('..'),
        number: 3,
        nameStatus: false,
    });
    log_1.default.log(log, log.length);
    return log.length;
}
exports.diffOrigin = diffOrigin;
function getHashHEAD(REPO_PATH, branch = 'HEAD') {
    return gitlog2_1.default({ repo: REPO_PATH, number: 1, branch })[0].abbrevHash;
}
exports.getHashHEAD = getHashHEAD;
function gitCheckRemote(REPO_PATH, remote) {
    return cross_spawn_1.crossSpawnSyncGit('git', [
        'ls-remote',
        '--exit-code',
        '--heads',
        '--quiet',
        (remote || 'origin'),
    ], {
        stdio: 'inherit',
        cwd: REPO_PATH,
    });
}
exports.gitCheckRemote = gitCheckRemote;
function createGit(options) {
    const wait_create_git = share_1.shareStates(share_1.EnumShareStates.WAIT_CREATE_GIT);
    wait_create_git.ensure();
    let targetName = path.basename(options.targetPath);
    let targetPath = path.normalize(options.targetPath);
    let REPO_PATH = targetPath;
    let exists = fs.pathExistsSync(REPO_PATH) && index_1.isGitRoot(REPO_PATH);
    let data = {
        targetName,
        targetPath,
        newBranchName: options.newBranchName,
        exists,
        existsBranchName: exists && oldBranch(REPO_PATH) || null,
        NOT_DONE: init_1.NOT_DONE,
        url: options.url,
        urlClone: options.urlClone,
        LOGIN_TOKEN: options.LOGIN_TOKEN,
        pushUrl: options.urlPush || util_2.getPushUrl(options.url, options.LOGIN_TOKEN),
    };
    let urlClone = data.urlClone;
    if (!urlClone) {
        log_1.default.red(`urlClone 不存在 嘗試自動生成`);
        if (data.LOGIN_TOKEN) {
            log_1.default.debug(`使用 LOGIN_TOKEN 自動生成 urlClone`);
            urlClone = util_2.getPushUrl(data.url, data.LOGIN_TOKEN);
        }
        else {
            log_1.default.debug(`使用 url 自動生成 urlClone`);
            urlClone = util_2.getPushUrl(data.url);
        }
    }
    let temp = {
        cp: null,
    };
    let _cp_error;
    let label;
    label = `--- CONFIG ---`;
    log_1.default.info(label);
    log_1.default.time(label);
    lib_1.gitSetRemote(data.targetPath, urlClone, 'origin');
    lib_1.gitSetRemote(data.targetPath, data.pushUrl, 'origin-push');
    log_1.default.timeEnd(label);
    log_1.default.info(`create git: ${targetName}`);
    if (options.on && options.on.create_before) {
        label = `--- CREATE_BEFORE ---`;
        log_1.default.info(label);
        log_1.default.time(label);
        options.on.create_before(data, temp);
        log_1.default.timeEnd(label);
    }
    label = `--- CREATE ---`;
    log_1.default.info(label);
    log_1.default.time(label);
    temp.cp = null;
    temp.cp = gitCheckRemote(data.targetPath, urlClone);
    _cp_error = index_1.getCrossSpawnError(temp.cp);
    if (_cp_error) {
        throw _cp_error;
    }
    let _deleted;
    if (data.NOT_DONE && data.exists) {
        log_1.default.warn(`${targetName} already exists`);
        temp.cp = fetchGit(data.targetPath, urlClone);
    }
    else if (data.exists) {
        log_1.default.warn(`${targetName} already exists`);
        log_1.default.info(`取得所有遠端分支`);
        fetchGitAll(data.targetPath);
        _deleted = gitRemoveBranchOutdate(data.targetPath);
        temp.cp = fetchGit(data.targetPath, urlClone);
    }
    else {
        let CLONE_DEPTH = (options.CLONE_DEPTH || process && process.env && process.env.CLONE_DEPTH || 50);
        if (isNaN(CLONE_DEPTH) || !CLONE_DEPTH || CLONE_DEPTH <= 0) {
            CLONE_DEPTH = 50;
        }
        temp.cp = __1.crossSpawnSync('git', [
            'clone',
            `--depth=${CLONE_DEPTH}`,
            //'--verbose',
            //'--progress ',
            urlClone,
            data.targetPath,
        ], {
            stdio: 'inherit',
            cwd: init_1.PROJECT_ROOT,
        });
    }
    _cp_error = index_1.getCrossSpawnError(temp.cp);
    if (_cp_error) {
        throw _cp_error;
    }
    if (options.on && options.on.create) {
        options.on.create(data, temp);
    }
    log_1.default.timeEnd(label);
    if (options.on && options.on.create_after) {
        label = `--- CREATE_AFTER ---`;
        log_1.default.info(label);
        log_1.default.time(label);
        options.on.create_after(data, temp);
        log_1.default.timeEnd(label);
    }
    label = `--- BEFORE_DONE ---`;
    log_1.default.info(label);
    log_1.default.time(label);
    if (_deleted) {
        gitGcAggressive(data.targetPath);
    }
    else {
        gitGc(data.targetPath);
    }
    log_1.default.timeEnd(label);
    label = `--- REMOVE_WAIT ---`;
    log_1.default.info(label);
    log_1.default.time(label);
    wait_create_git.remove();
    log_1.default.timeEnd(label);
    return { data, temp };
}
exports.createGit = createGit;
function gitGc(REPO_PATH, argv) {
    argv = util_1.filterArgv([
        'gc',
    ].concat((argv && argv.length) ? argv : []));
    if (argv.length == 1) {
        argv.push('--prune="3 days"');
    }
    log_1.default.info(`優化 GIT 資料`, argv);
    return __1.crossSpawnSync('git', argv, {
        cwd: REPO_PATH,
        stdio: 'inherit',
    });
}
exports.gitGc = gitGc;
function gitGcAggressive(REPO_PATH, argv) {
    argv = util_1.filterArgv([
        'gc',
        '--aggressive',
    ].concat((argv && argv.length) ? argv : []));
    if (argv.length == 2) {
        argv.push('--prune="3 days"');
    }
    log_1.default.info(`優化 GIT 資料`, argv);
    return __1.crossSpawnSync('git', argv, {
        cwd: REPO_PATH,
        stdio: 'inherit',
    });
}
exports.gitGcAggressive = gitGcAggressive;
function gitRemoveBranchOutdate(REPO_PATH) {
    log_1.default.info(`開始分析 GIT 分支`);
    let data_ret = false;
    let br_name = currentBranchName(REPO_PATH).toString().toLowerCase();
    let date_br = util_2.branchNameToDate(br_name);
    let date_now = moment();
    //console.log({br_name, date_br, date_now});
    let brs;
    brs = parseBranchGroup(gitBranchMergedList(REPO_PATH));
    if (brs) {
        log_1.default.log(`檢查並刪除已合併分支`);
        log_1.default.dir(brs, { colors: true, });
        let pre_name;
        pre_name = 'refs/heads/';
        brs.heads
            .forEach(function (value, index, array) {
            fn(value, pre_name + value);
        });
        pre_name = 'refs/remotes/';
        Object.keys(brs.remotes)
            .forEach(function (remote_name) {
            let prefix = pre_name + remote_name + '/';
            let brs_list = brs.remotes[remote_name];
            if (brs_list.length > 5) {
                brs_list = brs_list
                    .filter(function (value) {
                    let bool = /auto\//i.test(value);
                    return bool;
                })
                    .slice(0, -2);
                brs_list
                    .forEach(function (value, index, array) {
                    let bool = !/auto\//i.test(value);
                    let del_name = prefix + value;
                    fn(value, del_name, bool, true, remote_name);
                });
            }
        });
    }
    brs = parseBranchGroup(gitBranchMergedList(REPO_PATH, true));
    if (brs) {
        log_1.default.log(`檢查並刪除未合併過期分支`);
        log_1.default.dir(brs, { colors: true, });
        let pre_name;
        pre_name = 'refs/heads/';
        brs.heads
            .forEach(function (value, index, array) {
            fn(value, pre_name + value);
        });
        pre_name = 'refs/remotes/';
        Object.keys(brs.remotes)
            .forEach(function (remote_name) {
            if (remote_name == 'origin') {
                return;
            }
            let prefix = pre_name + remote_name + '/';
            let brs_list = brs.remotes[remote_name];
            if (brs_list.length > 5) {
                let max_date_unix = 0;
                brs_list = brs_list
                    .filter(function (value) {
                    let bool = /auto\//i.test(value);
                    if (bool) {
                        let d = util_2.branchNameToDate(value);
                        //console.log(d, d.unix());
                        max_date_unix = Math.max(max_date_unix, d.unix());
                    }
                    return bool;
                })
                    .slice(0, -3);
                let max_date = moment.unix(max_date_unix);
                brs_list
                    .forEach(function (value, index, array) {
                    let bool = !/^auto\//i.test(value);
                    let del_name = prefix + value;
                    fn(value, del_name, bool, true, remote_name);
                });
            }
        });
    }
    function fn(value, del_name, skip, is_remote, remote_name) {
        let value_lc = value.toLowerCase();
        if (skip) {
            log_1.default.log(`skip (1) ${del_name}`);
            return;
        }
        else if (!value || value_lc == br_name || value_lc == 'master' || value_lc == 'head') {
            log_1.default.log(`skip (2) ${del_name}`);
            return;
        }
        else if (is_remote) {
            if (!/auto\//i.test(value) || !remote_name) {
                log_1.default.log(`skip (3) ${del_name}`);
                return;
            }
            let d = moment(value.replace(/^.*auto\//, ''), exports.DATE_FORMAT);
            //console.log(d);
        }
        log_1.default.info(`try delete ${del_name}`);
        if (is_remote) {
            deleteBranchRemote(REPO_PATH, remote_name, value);
        }
        else {
            deleteBranch(REPO_PATH, value);
        }
        data_ret = true;
    }
    return data_ret;
}
exports.gitRemoveBranchOutdate = gitRemoveBranchOutdate;
function gitBranchMergedList(REPO_PATH, noMerged, BR_NAME) {
    let cp = __1.crossSpawnSync('git', util_1.filterArgv([
        'branch',
        '--format',
        '%(refname)',
        '-a',
        noMerged ? '--no-merged' : '--merged',
        BR_NAME,
    ]), {
        cwd: REPO_PATH,
    });
    if (cp.stderr && cp.stderr.length) {
        log_1.default.error(cp.stderr.toString());
        return null;
    }
    let name = index_1.crossSpawnOutput(cp.stdout);
    return name
        .split(crlf_normalize_1.LF);
}
exports.gitBranchMergedList = gitBranchMergedList;
function parseBranchGroup(r) {
    if (!r || !r.length) {
        return null;
    }
    return r.sort().reduce(function (a, b) {
        if (/^refs\/remotes\/([^\/]+)\/(.+)$/.exec(b)) {
            let { $1, $2 } = RegExp;
            a.remotes[$1] = a.remotes[$1] || [];
            a.remotes[$1].push($2);
        }
        else if (/^refs\/heads\/(.+)$/.exec(b)) {
            let { $1, $2 } = RegExp;
            a.heads.push($1);
        }
        return a;
    }, {
        heads: [],
        remotes: {
            origin: [],
        },
    });
}
exports.parseBranchGroup = parseBranchGroup;
function gitCleanAll(REPO_PATH) {
    log_1.default.info(`[git:clean] Remove untracked files from the working tree`);
    return __1.crossSpawnSync('git', [
        'clean',
        '-d',
        '-fx',
    ], {
        stdio: 'inherit',
        cwd: REPO_PATH,
    });
}
exports.gitCleanAll = gitCleanAll;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2l0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQWdDO0FBQ2hDLGlDQUFrQztBQUNsQywrQkFBZ0M7QUFDaEMsbURBQW9DO0FBQ3BDLHFDQUE2QjtBQUM3QiwwQkFBc0Q7QUFDdEQsb0NBQTZGO0FBQzdGLG9DQUFpQztBQUNqQyx3Q0FBNEQ7QUFDNUQsc0NBQXlDO0FBQ3pDLG1EQUFzRDtBQUN0RCxtQ0FBeUM7QUFFekMscUNBQTJFO0FBRTNFLGlDQUF5RDtBQUV6RCwrQkFBMEI7QUFDMUIsZ0NBQTJCO0FBRWQsUUFBQSxXQUFXLEdBQUcscUJBQXFCLENBQUM7QUFFakQsU0FBZ0IsT0FBTyxDQUFDLFNBQWlCO0lBRXhDLE9BQU8sa0JBQWMsQ0FBQyxLQUFLLEVBQUU7UUFDNUIsTUFBTTtLQUNOLEVBQUU7UUFDRixLQUFLLEVBQUUsU0FBUztRQUNoQixHQUFHLEVBQUUsU0FBUztLQUNkLENBQUMsQ0FBQztBQUNKLENBQUM7QUFSRCwwQkFRQztBQUVELFNBQWdCLFFBQVEsQ0FBQyxTQUFpQixFQUFFLE1BQWU7SUFFMUQsT0FBTywrQkFBaUIsQ0FBQyxLQUFLLEVBQUU7UUFDL0IsT0FBTztRQUNQLFNBQVM7UUFDVCxNQUFNLElBQUksUUFBUTtRQUNsQixRQUFRO0tBQ1IsRUFBRTtRQUNGLEtBQUssRUFBRSxTQUFTO1FBQ2hCLEdBQUcsRUFBRSxTQUFTO0tBQ2QsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQVhELDRCQVdDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLFNBQWlCO0lBRTVDLE9BQU8sK0JBQWlCLENBQUMsS0FBSyxFQUFFO1FBQy9CLE9BQU87UUFDUCxPQUFPO1FBQ1AsU0FBUztLQUNULEVBQUU7UUFDRixLQUFLLEVBQUUsU0FBUztRQUNoQixHQUFHLEVBQUUsU0FBUztLQUNkLENBQUMsQ0FBQztBQUNKLENBQUM7QUFWRCxrQ0FVQztBQUVELFNBQWdCLFNBQVMsQ0FBQyxT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QyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDN0M7WUFDQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQztZQUN4QixDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3BDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZCO2FBQ0ksSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ3RDO1lBQ0MsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUM7WUFDeEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDakI7UUFFRCxPQUFPLENBQUMsQ0FBQztJQUNWLENBQUMsRUFBRTtRQUNGLEtBQUssRUFBRSxFQUFFO1FBQ1QsT0FBTyxFQUFFO1lBQ1IsTUFBTSxFQUFFLEVBQUU7U0FDVjtLQUNELENBQUMsQ0FBQTtBQUNILENBQUM7QUFsQ0QsNENBa0NDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLFNBQWlCO0lBRTVDLGFBQU8sQ0FBQyxJQUFJLENBQUMsMERBQTBELENBQUMsQ0FBQztJQUN6RSxPQUFPLGtCQUFjLENBQUMsS0FBSyxFQUFFO1FBQzVCLE9BQU87UUFDUCxJQUFJO1FBQ0osS0FBSztLQUNMLEVBQUU7UUFDRixLQUFLLEVBQUUsU0FBUztRQUNoQixHQUFHLEVBQUUsU0FBUztLQUNkLENBQUMsQ0FBQztBQUNKLENBQUM7QUFYRCxrQ0FXQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XG5pbXBvcnQgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3VwYXRoMicpO1xuaW1wb3J0IHsgTEYgfSBmcm9tICdjcmxmLW5vcm1hbGl6ZSc7XG5pbXBvcnQgZ2l0bG9nIGZyb20gJ2dpdGxvZzInO1xuaW1wb3J0IHsgY3Jvc3NTcGF3blN5bmMsIFNwYXduU3luY1JldHVybnMgfSBmcm9tICcuLic7XG5pbXBvcnQgeyBjcm9zc1NwYXduT3V0cHV0LCBnZXRDcm9zc1NwYXduRXJyb3IsIGlzR2l0Um9vdCwgSVNwYXduQVN5bmNFcnJvciB9IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCBjb25zb2xlIGZyb20gJy4uL2xpYi9sb2cnO1xuaW1wb3J0IHsgRW51bVNoYXJlU3RhdGVzLCBzaGFyZVN0YXRlcyB9IGZyb20gJy4uL2xpYi9zaGFyZSc7XG5pbXBvcnQgeyBmaWx0ZXJBcmd2IH0gZnJvbSAnLi4vbGliL3V0aWwnO1xuaW1wb3J0IHsgY3Jvc3NTcGF3blN5bmNHaXQgfSBmcm9tICcuL2dpdC9jcm9zcy1zcGF3bic7XG5pbXBvcnQgeyBnaXRTZXRSZW1vdGUgfSBmcm9tICcuL2dpdC9saWInO1xuaW1wb3J0IHsgR0lUX1RPS0VOIH0gZnJvbSAnLi9naXQvdG9rZW4nO1xuaW1wb3J0IHsgYnJhbmNoTmFtZVRvRGF0ZSwgZ2V0UHVzaFVybCwgZ2V0UHVzaFVybEdpdGVlIH0gZnJvbSAnLi9naXQvdXRpbCc7XG5cbmltcG9ydCB7IE5PX1BVU0gsIE5PVF9ET05FLCBQUk9KRUNUX1JPT1QgfSBmcm9tICcuL2luaXQnO1xuXG5leHBvcnQgKiBmcm9tICcuL2dpdC9saWInO1xuZXhwb3J0ICogZnJvbSAnLi9naXQvdXRpbCc7XG5cbmV4cG9ydCBjb25zdCBEQVRFX0ZPUk1BVCA9ICdZWVlZLU1NLURELUhILW1tLXNzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHB1bGxHaXQoUkVQT19QQVRIOiBzdHJpbmcpXG57XG5cdHJldHVybiBjcm9zc1NwYXduU3luYygnZ2l0JywgW1xuXHRcdCdwdWxsJyxcblx0XSwge1xuXHRcdHN0ZGlvOiAnaW5oZXJpdCcsXG5cdFx0Y3dkOiBSRVBPX1BBVEgsXG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hHaXQoUkVQT19QQVRIOiBzdHJpbmcsIHJlbW90ZT86IHN0cmluZylcbntcblx0cmV0dXJuIGNyb3NzU3Bhd25TeW5jR2l0KCdnaXQnLCBbXG5cdFx0J2ZldGNoJyxcblx0XHQnLS1mb3JjZScsXG5cdFx0cmVtb3RlIHx8ICdvcmlnaW4nLFxuXHRcdCdtYXN0ZXInLFxuXHRdLCB7XG5cdFx0c3RkaW86ICdpbmhlcml0Jyxcblx0XHRjd2Q6IFJFUE9fUEFUSCxcblx0fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaEdpdEFsbChSRVBPX1BBVEg6IHN0cmluZylcbntcblx0cmV0dXJuIGNyb3NzU3Bhd25TeW5jR2l0KCdnaXQnLCBbXG5cdFx0J2ZldGNoJyxcblx0XHQnLS1hbGwnLFxuXHRcdCctLXBydW5lJyxcblx0XSwge1xuXHRcdHN0ZGlvOiAnaW5oZXJpdCcsXG5cdFx0Y3dkOiBSRVBPX1BBVEgsXG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3QnJhbmNoKFJFUE9fUEFUSDogc3RyaW5nLCBCUl9OQU1FOiBzdHJpbmcpXG57XG5cdGNvbnNvbGUuZGVidWcoYOWYl+ippuW7uueri+aWsOWIhuaUryAke0JSX05BTUV9YCk7XG5cblx0cmV0dXJuIGNyb3NzU3Bhd25TeW5jKCdnaXQnLCBbXG5cdFx0J2NoZWNrb3V0Jyxcblx0XHQnLUInLFxuXHRcdEJSX05BTUUsXG5cdFx0J29yaWdpbi9tYXN0ZXInLFxuXHRdLCB7XG5cdFx0c3RkaW86ICdpbmhlcml0Jyxcblx0XHRjd2Q6IFJFUE9fUEFUSCxcblx0fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXJyZW50QnJhbmNoTmFtZShSRVBPX1BBVEg6IHN0cmluZylcbntcblx0bGV0IGNwID0gY3Jvc3NTcGF3blN5bmMoJ2dpdCcsIFtcblx0XHQncmV2LXBhcnNlJyxcblx0XHQnLS1hYmJyZXYtcmVmJyxcblx0XHQnSEVBRCcsXG5cdF0sIHtcblx0XHRjd2Q6IFJFUE9fUEFUSCxcblx0fSk7XG5cblx0bGV0IG5hbWUgPSBjcm9zc1NwYXduT3V0cHV0KGNwLnN0ZG91dCk7XG5cblx0cmV0dXJuIG5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVCcmFuY2goUkVQT19QQVRIOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgZm9yY2U/OiBib29sZWFuKVxue1xuXHRpZiAobmFtZSA9PSAnbWFzdGVyJyB8fCAhbmFtZSlcblx0e1xuXHRcdHRocm93IG5ldyBFcnJvcigpO1xuXHR9XG5cblx0Y29uc29sZS5kZWJ1Zyhg5ZiX6Kmm5Yiq6Zmk5pys5Zyw5YiG5pSvICR7bmFtZX1gKTtcblxuXHRyZXR1cm4gY3Jvc3NTcGF3blN5bmMoJ2dpdCcsIFtcblx0XHQnYnJhbmNoJyxcblx0XHRmb3JjZSA/ICctRCcgOiAnLWQnLFxuXHRcdG5hbWUsXG5cdF0sIHtcblx0XHRzdGRpbzogJ2luaGVyaXQnLFxuXHRcdGN3ZDogUkVQT19QQVRILFxuXHR9KTtcbn1cblxuLyoqXG4gKiBARklYTUUg5LiN55+l6YGT54K65LuA6bq85rKS5pyJ5Yiq6ZmkIOaJgOS7peWkmuWBmuS4gOasoeWPpuWkluS4gOeoruWIqumZpOatpempn1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlQnJhbmNoUmVtb3RlKFJFUE9fUEFUSDogc3RyaW5nLCByZW1vdGU6IHN0cmluZywgbmFtZTogc3RyaW5nLCBmb3JjZT86IGJvb2xlYW4pXG57XG5cdGlmIChuYW1lID09ICdtYXN0ZXInIHx8ICFuYW1lIHx8ICFyZW1vdGUpXG5cdHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoKTtcblx0fVxuXG5cdGNvbnNvbGUuZGVidWcoYOWYl+ippuWIqumZpOmBoOerr+WIhuaUryAke25hbWV9YCk7XG5cblx0Y3Jvc3NTcGF3blN5bmMoJ2dpdCcsIFtcblx0XHQncHVzaCcsXG5cdFx0cmVtb3RlLFxuXHRcdCctLWRlbGV0ZScsXG5cdFx0bmFtZSxcblx0XSwge1xuXHRcdHN0ZGlvOiAnaW5oZXJpdCcsXG5cdFx0Y3dkOiBSRVBPX1BBVEgsXG5cdH0pO1xuXG5cdC8qKlxuXHQgKiDkuI3nn6XpgZPngrrku4DpurzmspLmnInliKrpmaQg5omA5Lul5aSa5YGa5LiA5qyh5Y+m5aSW5LiA56iu5Yiq6Zmk5q2l6amfXG5cdCAqIGh0dHBzOi8vemxhcmdvbi5naXRib29rcy5pby9naXQtdHV0b3JpYWwvY29udGVudC9yZW1vdGUvZGVsZXRlX2JyYW5jaC5odG1sXG5cdCAqL1xuXHRjcm9zc1NwYXduU3luYygnZ2l0JywgW1xuXHRcdCdwdXNoJyxcblx0XHRyZW1vdGUsXG5cdFx0JzonICsgbmFtZSxcblx0XSwge1xuXHRcdHN0ZGlvOiAnaW5oZXJpdCcsXG5cdFx0Y3dkOiBSRVBPX1BBVEgsXG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb2xkQnJhbmNoKFJFUE9fUEFUSDogc3RyaW5nKVxue1xuXHRsZXQgbmFtZSA9IGN1cnJlbnRCcmFuY2hOYW1lKFJFUE9fUEFUSCk7XG5cblx0aWYgKG5hbWUuaW5kZXhPZignYXV0by8nKSA9PSAwKVxuXHR7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHRyZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZPcmlnaW4oUkVQT19QQVRIOiBzdHJpbmcpXG57XG5cdGxldCBsb2cgPSBnaXRsb2coe1xuXHRcdHJlcG86IFJFUE9fUEFUSCxcblx0XHRicmFuY2g6IFtjdXJyZW50QnJhbmNoTmFtZShSRVBPX1BBVEgpLCAnb3JpZ2luL21hc3RlciddLmpvaW4oJy4uJyksXG5cdFx0bnVtYmVyOiAzLFxuXHRcdG5hbWVTdGF0dXM6IGZhbHNlLFxuXHR9KTtcblxuXHRjb25zb2xlLmxvZyhsb2csIGxvZy5sZW5ndGgpO1xuXG5cdHJldHVybiBsb2cubGVuZ3RoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGFzaEhFQUQoUkVQT19QQVRIOiBzdHJpbmcsIGJyYW5jaDogc3RyaW5nID0gJ0hFQUQnKVxue1xuXHRyZXR1cm4gZ2l0bG9nKHsgcmVwbzogUkVQT19QQVRILCBudW1iZXI6IDEsIGJyYW5jaCB9KVswXS5hYmJyZXZIYXNoO1xufVxuXG5leHBvcnQgdHlwZSBJT3B0aW9uc0NyZWF0ZUdpdCA9IHtcblx0dXJsOiBzdHJpbmcsXG5cdHRhcmdldFBhdGg6IHN0cmluZyxcblxuXHRuZXdCcmFuY2hOYW1lOiBzdHJpbmcsXG5cblx0dXJsQ2xvbmU/OiBzdHJpbmcsXG5cdHVybFB1c2g/OiBzdHJpbmcsXG5cblx0Tk9UX0RPTkUsXG5cblx0Q0xPTkVfREVQVEg/OiBudW1iZXIsXG5cblx0TE9HSU5fVE9LRU4/OiBzdHJpbmcsXG5cblx0b24/OiB7XG5cdFx0Y3JlYXRlX2JlZm9yZT8oZGF0YTogUmV0dXJuVHlwZTx0eXBlb2YgY3JlYXRlR2l0PltcImRhdGFcIl0sIHRlbXA/OiBSZXR1cm5UeXBlPHR5cGVvZiBjcmVhdGVHaXQ+W1widGVtcFwiXSksXG5cdFx0Y3JlYXRlPyhkYXRhOiBSZXR1cm5UeXBlPHR5cGVvZiBjcmVhdGVHaXQ+W1wiZGF0YVwiXSwgdGVtcD86IFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZUdpdD5bXCJ0ZW1wXCJdKSxcblx0XHRjcmVhdGVfYWZ0ZXI/KGRhdGE6IFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZUdpdD5bXCJkYXRhXCJdLCB0ZW1wPzogUmV0dXJuVHlwZTx0eXBlb2YgY3JlYXRlR2l0PltcInRlbXBcIl0pLFxuXHR9LFxufTtcblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnaXRDaGVja1JlbW90ZShSRVBPX1BBVEg6IHN0cmluZywgcmVtb3RlPzogc3RyaW5nKVxue1xuXHRyZXR1cm4gY3Jvc3NTcGF3blN5bmNHaXQoJ2dpdCcsIFtcblx0XHQnbHMtcmVtb3RlJyxcblx0XHQnLS1leGl0LWNvZGUnLFxuXHRcdCctLWhlYWRzJyxcblx0XHQnLS1xdWlldCcsXG5cdFx0KHJlbW90ZSB8fCAnb3JpZ2luJyksXG5cdF0sIHtcblx0XHRzdGRpbzogJ2luaGVyaXQnLFxuXHRcdGN3ZDogUkVQT19QQVRILFxuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUdpdChvcHRpb25zOiBJT3B0aW9uc0NyZWF0ZUdpdClcbntcblx0Y29uc3Qgd2FpdF9jcmVhdGVfZ2l0ID0gc2hhcmVTdGF0ZXMoRW51bVNoYXJlU3RhdGVzLldBSVRfQ1JFQVRFX0dJVCk7XG5cblx0d2FpdF9jcmVhdGVfZ2l0LmVuc3VyZSgpO1xuXG5cdGxldCB0YXJnZXROYW1lID0gcGF0aC5iYXNlbmFtZShvcHRpb25zLnRhcmdldFBhdGgpO1xuXHRsZXQgdGFyZ2V0UGF0aCA9IHBhdGgubm9ybWFsaXplKG9wdGlvbnMudGFyZ2V0UGF0aCk7XG5cblx0bGV0IFJFUE9fUEFUSCA9IHRhcmdldFBhdGg7XG5cblx0bGV0IGV4aXN0cyA9IGZzLnBhdGhFeGlzdHNTeW5jKFJFUE9fUEFUSCkgJiYgaXNHaXRSb290KFJFUE9fUEFUSCk7XG5cblx0bGV0IGRhdGEgPSB7XG5cdFx0dGFyZ2V0TmFtZSxcblx0XHR0YXJnZXRQYXRoLFxuXG5cdFx0bmV3QnJhbmNoTmFtZTogb3B0aW9ucy5uZXdCcmFuY2hOYW1lLFxuXG5cdFx0ZXhpc3RzLFxuXHRcdGV4aXN0c0JyYW5jaE5hbWU6IGV4aXN0cyAmJiBvbGRCcmFuY2goUkVQT19QQVRIKSB8fCBudWxsLFxuXG5cdFx0Tk9UX0RPTkUsXG5cblx0XHR1cmw6IG9wdGlvbnMudXJsLFxuXHRcdHVybENsb25lOiBvcHRpb25zLnVybENsb25lLFxuXG5cdFx0TE9HSU5fVE9LRU46IG9wdGlvbnMuTE9HSU5fVE9LRU4sXG5cblx0XHRwdXNoVXJsOiBvcHRpb25zLnVybFB1c2ggfHwgZ2V0UHVzaFVybChvcHRpb25zLnVybCwgb3B0aW9ucy5MT0dJTl9UT0tFTiksXG5cdH07XG5cblx0bGV0IHVybENsb25lID0gZGF0YS51cmxDbG9uZTtcblxuXHRpZiAoIXVybENsb25lKVxuXHR7XG5cdFx0Y29uc29sZS5yZWQoYHVybENsb25lIOS4jeWtmOWcqCDlmJfoqaboh6rli5XnlJ/miJBgKTtcblxuXHRcdGlmIChkYXRhLkxPR0lOX1RPS0VOKVxuXHRcdHtcblx0XHRcdGNvbnNvbGUuZGVidWcoYOS9v+eUqCBMT0dJTl9UT0tFTiDoh6rli5XnlJ/miJAgdXJsQ2xvbmVgKTtcblx0XHRcdHVybENsb25lID0gZ2V0UHVzaFVybChkYXRhLnVybCwgZGF0YS5MT0dJTl9UT0tFTik7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRjb25zb2xlLmRlYnVnKGDkvb/nlKggdXJsIOiHquWLleeUn+aIkCB1cmxDbG9uZWApO1xuXHRcdFx0dXJsQ2xvbmUgPSBnZXRQdXNoVXJsKGRhdGEudXJsKTtcblx0XHR9XG5cdH1cblxuXHRsZXQgdGVtcDoge1xuXHRcdGNwOiBTcGF3blN5bmNSZXR1cm5zLFxuXG5cdFx0W2s6IHN0cmluZ106IGFueSxcblx0fSA9IHtcblx0XHRjcDogbnVsbCxcblx0fTtcblxuXHRsZXQgX2NwX2Vycm9yOiBJU3Bhd25BU3luY0Vycm9yO1xuXG5cdGxldCBsYWJlbDogc3RyaW5nO1xuXG5cdGxhYmVsID0gYC0tLSBDT05GSUcgLS0tYDtcblxuXHRjb25zb2xlLmluZm8obGFiZWwpO1xuXHRjb25zb2xlLnRpbWUobGFiZWwpO1xuXG5cdGdpdFNldFJlbW90ZShkYXRhLnRhcmdldFBhdGgsIHVybENsb25lLCAnb3JpZ2luJyk7XG5cdGdpdFNldFJlbW90ZShkYXRhLnRhcmdldFBhdGgsIGRhdGEucHVzaFVybCwgJ29yaWdpbi1wdXNoJyk7XG5cblx0Y29uc29sZS50aW1lRW5kKGxhYmVsKTtcblxuXHRjb25zb2xlLmluZm8oYGNyZWF0ZSBnaXQ6ICR7dGFyZ2V0TmFtZX1gKTtcblxuXHRpZiAob3B0aW9ucy5vbiAmJiBvcHRpb25zLm9uLmNyZWF0ZV9iZWZvcmUpXG5cdHtcblx0XHRsYWJlbCA9IGAtLS0gQ1JFQVRFX0JFRk9SRSAtLS1gO1xuXHRcdGNvbnNvbGUuaW5mbyhsYWJlbCk7XG5cdFx0Y29uc29sZS50aW1lKGxhYmVsKTtcblx0XHRvcHRpb25zLm9uLmNyZWF0ZV9iZWZvcmUoZGF0YSwgdGVtcCk7XG5cdFx0Y29uc29sZS50aW1lRW5kKGxhYmVsKTtcblx0fVxuXG5cdGxhYmVsID0gYC0tLSBDUkVBVEUgLS0tYDtcblx0Y29uc29sZS5pbmZvKGxhYmVsKTtcblx0Y29uc29sZS50aW1lKGxhYmVsKTtcblxuXHR0ZW1wLmNwID0gbnVsbDtcblxuXHR0ZW1wLmNwID0gZ2l0Q2hlY2tSZW1vdGUoZGF0YS50YXJnZXRQYXRoLCB1cmxDbG9uZSk7XG5cblx0X2NwX2Vycm9yID0gZ2V0Q3Jvc3NTcGF3bkVycm9yKHRlbXAuY3ApO1xuXG5cdGlmIChfY3BfZXJyb3IpXG5cdHtcblx0XHR0aHJvdyBfY3BfZXJyb3Jcblx0fVxuXG5cdGxldCBfZGVsZXRlZDogYm9vbGVhbjtcblxuXHRpZiAoZGF0YS5OT1RfRE9ORSAmJiBkYXRhLmV4aXN0cylcblx0e1xuXHRcdGNvbnNvbGUud2FybihgJHt0YXJnZXROYW1lfSBhbHJlYWR5IGV4aXN0c2ApO1xuXG5cdFx0dGVtcC5jcCA9IGZldGNoR2l0KGRhdGEudGFyZ2V0UGF0aCwgdXJsQ2xvbmUpO1xuXHR9XG5cdGVsc2UgaWYgKGRhdGEuZXhpc3RzKVxuXHR7XG5cdFx0Y29uc29sZS53YXJuKGAke3RhcmdldE5hbWV9IGFscmVhZHkgZXhpc3RzYCk7XG5cblx0XHRjb25zb2xlLmluZm8oYOWPluW+l+aJgOaciemBoOerr+WIhuaUr2ApO1xuXHRcdGZldGNoR2l0QWxsKGRhdGEudGFyZ2V0UGF0aCk7XG5cblx0XHRfZGVsZXRlZCA9IGdpdFJlbW92ZUJyYW5jaE91dGRhdGUoZGF0YS50YXJnZXRQYXRoKTtcblxuXHRcdHRlbXAuY3AgPSBmZXRjaEdpdChkYXRhLnRhcmdldFBhdGgsIHVybENsb25lKTtcblx0fVxuXHRlbHNlXG5cdHtcblx0XHRsZXQgQ0xPTkVfREVQVEg6IG51bWJlciA9IChvcHRpb25zLkNMT05FX0RFUFRIIHx8IHByb2Nlc3MgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuQ0xPTkVfREVQVEggfHwgNTApIGFzIG51bWJlcjtcblxuXHRcdGlmIChpc05hTihDTE9ORV9ERVBUSCkgfHwgIUNMT05FX0RFUFRIIHx8IENMT05FX0RFUFRIIDw9IDApXG5cdFx0e1xuXHRcdFx0Q0xPTkVfREVQVEggPSA1MDtcblx0XHR9XG5cblx0XHR0ZW1wLmNwID0gY3Jvc3NTcGF3blN5bmMoJ2dpdCcsIFtcblx0XHRcdCdjbG9uZScsXG5cdFx0XHRgLS1kZXB0aD0ke0NMT05FX0RFUFRIfWAsXG5cdFx0XHQvLyctLXZlcmJvc2UnLFxuXHRcdFx0Ly8nLS1wcm9ncmVzcyAnLFxuXHRcdFx0dXJsQ2xvbmUsXG5cdFx0XHRkYXRhLnRhcmdldFBhdGgsXG5cdFx0XSwge1xuXHRcdFx0c3RkaW86ICdpbmhlcml0Jyxcblx0XHRcdGN3ZDogUFJPSkVDVF9ST09ULFxuXHRcdH0pO1xuXHR9XG5cblx0X2NwX2Vycm9yID0gZ2V0Q3Jvc3NTcGF3bkVycm9yKHRlbXAuY3ApO1xuXG5cdGlmIChfY3BfZXJyb3IpXG5cdHtcblx0XHR0aHJvdyBfY3BfZXJyb3Jcblx0fVxuXG5cdGlmIChvcHRpb25zLm9uICYmIG9wdGlvbnMub24uY3JlYXRlKVxuXHR7XG5cdFx0b3B0aW9ucy5vbi5jcmVhdGUoZGF0YSwgdGVtcCk7XG5cdH1cblxuXHRjb25zb2xlLnRpbWVFbmQobGFiZWwpO1xuXG5cdGlmIChvcHRpb25zLm9uICYmIG9wdGlvbnMub24uY3JlYXRlX2FmdGVyKVxuXHR7XG5cdFx0bGFiZWwgPSBgLS0tIENSRUFURV9BRlRFUiAtLS1gO1xuXHRcdGNvbnNvbGUuaW5mbyhsYWJlbCk7XG5cdFx0Y29uc29sZS50aW1lKGxhYmVsKTtcblx0XHRvcHRpb25zLm9uLmNyZWF0ZV9hZnRlcihkYXRhLCB0ZW1wKTtcblx0XHRjb25zb2xlLnRpbWVFbmQobGFiZWwpO1xuXHR9XG5cblx0bGFiZWwgPSBgLS0tIEJFRk9SRV9ET05FIC0tLWA7XG5cdGNvbnNvbGUuaW5mbyhsYWJlbCk7XG5cdGNvbnNvbGUudGltZShsYWJlbCk7XG5cblx0aWYgKF9kZWxldGVkKVxuXHR7XG5cdFx0Z2l0R2NBZ2dyZXNzaXZlKGRhdGEudGFyZ2V0UGF0aCk7XG5cdH1cblx0ZWxzZVxuXHR7XG5cdFx0Z2l0R2MoZGF0YS50YXJnZXRQYXRoKTtcblx0fVxuXG5cdGNvbnNvbGUudGltZUVuZChsYWJlbCk7XG5cblx0bGFiZWwgPSBgLS0tIFJFTU9WRV9XQUlUIC0tLWA7XG5cdGNvbnNvbGUuaW5mbyhsYWJlbCk7XG5cdGNvbnNvbGUudGltZShsYWJlbCk7XG5cblx0d2FpdF9jcmVhdGVfZ2l0LnJlbW92ZSgpO1xuXG5cdGNvbnNvbGUudGltZUVuZChsYWJlbCk7XG5cblx0cmV0dXJuIHsgZGF0YSwgdGVtcCB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnaXRHYyhSRVBPX1BBVEg6IHN0cmluZywgYXJndj86IHN0cmluZ1tdKVxue1xuXHRhcmd2ID0gZmlsdGVyQXJndihbXG5cdFx0J2djJyxcblx0XS5jb25jYXQoKGFyZ3YgJiYgYXJndi5sZW5ndGgpID8gYXJndiA6IFtdKSk7XG5cblx0aWYgKGFyZ3YubGVuZ3RoID09IDEpXG5cdHtcblx0XHRhcmd2LnB1c2goJy0tcHJ1bmU9XCIzIGRheXNcIicpO1xuXHR9XG5cblx0Y29uc29sZS5pbmZvKGDlhKrljJYgR0lUIOizh+aWmWAsIGFyZ3YpO1xuXG5cdHJldHVybiBjcm9zc1NwYXduU3luYygnZ2l0JywgYXJndiwge1xuXHRcdGN3ZDogUkVQT19QQVRILFxuXHRcdHN0ZGlvOiAnaW5oZXJpdCcsXG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2l0R2NBZ2dyZXNzaXZlKFJFUE9fUEFUSDogc3RyaW5nLCBhcmd2Pzogc3RyaW5nW10pXG57XG5cdGFyZ3YgPSBmaWx0ZXJBcmd2KFtcblx0XHQnZ2MnLFxuXHRcdCctLWFnZ3Jlc3NpdmUnLFxuXHRdLmNvbmNhdCgoYXJndiAmJiBhcmd2Lmxlbmd0aCkgPyBhcmd2IDogW10pKTtcblxuXHRpZiAoYXJndi5sZW5ndGggPT0gMilcblx0e1xuXHRcdGFyZ3YucHVzaCgnLS1wcnVuZT1cIjMgZGF5c1wiJyk7XG5cdH1cblxuXHRjb25zb2xlLmluZm8oYOWEquWMliBHSVQg6LOH5paZYCwgYXJndik7XG5cblx0cmV0dXJuIGNyb3NzU3Bhd25TeW5jKCdnaXQnLCBhcmd2LCB7XG5cdFx0Y3dkOiBSRVBPX1BBVEgsXG5cdFx0c3RkaW86ICdpbmhlcml0Jyxcblx0fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnaXRSZW1vdmVCcmFuY2hPdXRkYXRlKFJFUE9fUEFUSDogc3RyaW5nKVxue1xuXHRjb25zb2xlLmluZm8oYOmWi+Wni+WIhuaekCBHSVQg5YiG5pSvYCk7XG5cblx0bGV0IGRhdGFfcmV0OiBib29sZWFuID0gZmFsc2U7XG5cblx0bGV0IGJyX25hbWUgPSBjdXJyZW50QnJhbmNoTmFtZShSRVBPX1BBVEgpLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcblxuXHRsZXQgZGF0ZV9iciA9IGJyYW5jaE5hbWVUb0RhdGUoYnJfbmFtZSk7XG5cdGxldCBkYXRlX25vdyA9IG1vbWVudCgpO1xuXG5cdC8vY29uc29sZS5sb2coe2JyX25hbWUsIGRhdGVfYnIsIGRhdGVfbm93fSk7XG5cblx0bGV0IGJyczogUmV0dXJuVHlwZTx0eXBlb2YgcGFyc2VCcmFuY2hHcm91cD47XG5cblx0YnJzID0gcGFyc2VCcmFuY2hHcm91cChnaXRCcmFuY2hNZXJnZWRMaXN0KFJFUE9fUEFUSCkpO1xuXG5cdGlmIChicnMpXG5cdHtcblx0XHRjb25zb2xlLmxvZyhg5qqi5p+l5Lim5Yiq6Zmk5bey5ZCI5L215YiG5pSvYCk7XG5cdFx0Y29uc29sZS5kaXIoYnJzLCB7IGNvbG9yczogdHJ1ZSwgfSk7XG5cblx0XHRsZXQgcHJlX25hbWU6IHN0cmluZztcblxuXHRcdHByZV9uYW1lID0gJ3JlZnMvaGVhZHMvJztcblxuXHRcdGJycy5oZWFkc1xuXHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKHZhbHVlOiBzdHJpbmcsIGluZGV4LCBhcnJheSlcblx0XHRcdHtcblx0XHRcdFx0Zm4odmFsdWUsIHByZV9uYW1lICsgdmFsdWUpO1xuXHRcdFx0fSlcblx0XHQ7XG5cblx0XHRwcmVfbmFtZSA9ICdyZWZzL3JlbW90ZXMvJztcblxuXHRcdE9iamVjdC5rZXlzKGJycy5yZW1vdGVzKVxuXHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKHJlbW90ZV9uYW1lKVxuXHRcdFx0e1xuXHRcdFx0XHRsZXQgcHJlZml4ID0gcHJlX25hbWUgKyByZW1vdGVfbmFtZSArICcvJztcblxuXHRcdFx0XHRsZXQgYnJzX2xpc3QgPSBicnMucmVtb3Rlc1tyZW1vdGVfbmFtZV07XG5cblx0XHRcdFx0aWYgKGJyc19saXN0Lmxlbmd0aCA+IDUpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRicnNfbGlzdCA9IGJyc19saXN0XG5cdFx0XHRcdFx0XHQuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSlcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bGV0IGJvb2wgPSAvYXV0b1xcLy9pLnRlc3QodmFsdWUpO1xuXG5cdFx0XHRcdFx0XHRcdHJldHVybiBib29sO1xuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdC5zbGljZSgwLCAtMilcblx0XHRcdFx0XHQ7XG5cblx0XHRcdFx0XHRicnNfbGlzdFxuXHRcdFx0XHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKHZhbHVlOiBzdHJpbmcsIGluZGV4LCBhcnJheSlcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bGV0IGJvb2wgPSAhL2F1dG9cXC8vaS50ZXN0KHZhbHVlKTtcblx0XHRcdFx0XHRcdFx0bGV0IGRlbF9uYW1lID0gcHJlZml4ICsgdmFsdWU7XG5cblx0XHRcdFx0XHRcdFx0Zm4odmFsdWUsIGRlbF9uYW1lLCBib29sLCB0cnVlLCByZW1vdGVfbmFtZSk7XG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdDtcblx0XHRcdFx0fVxuXHRcdFx0fSlcblx0XHQ7XG5cdH1cblxuXHRicnMgPSBwYXJzZUJyYW5jaEdyb3VwKGdpdEJyYW5jaE1lcmdlZExpc3QoUkVQT19QQVRILCB0cnVlKSk7XG5cblx0aWYgKGJycylcblx0e1xuXHRcdGNvbnNvbGUubG9nKGDmqqLmn6XkuKbliKrpmaTmnKrlkIjkvbXpgY7mnJ/liIbmlK9gKTtcblx0XHRjb25zb2xlLmRpcihicnMsIHsgY29sb3JzOiB0cnVlLCB9KTtcblxuXHRcdGxldCBwcmVfbmFtZTogc3RyaW5nO1xuXG5cdFx0cHJlX25hbWUgPSAncmVmcy9oZWFkcy8nO1xuXG5cdFx0YnJzLmhlYWRzXG5cdFx0XHQuZm9yRWFjaChmdW5jdGlvbiAodmFsdWU6IHN0cmluZywgaW5kZXgsIGFycmF5KVxuXHRcdFx0e1xuXHRcdFx0XHRmbih2YWx1ZSwgcHJlX25hbWUgKyB2YWx1ZSk7XG5cdFx0XHR9KVxuXHRcdDtcblxuXHRcdHByZV9uYW1lID0gJ3JlZnMvcmVtb3Rlcy8nO1xuXG5cdFx0T2JqZWN0LmtleXMoYnJzLnJlbW90ZXMpXG5cdFx0XHQuZm9yRWFjaChmdW5jdGlvbiAocmVtb3RlX25hbWUpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChyZW1vdGVfbmFtZSA9PSAnb3JpZ2luJylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCBwcmVmaXggPSBwcmVfbmFtZSArIHJlbW90ZV9uYW1lICsgJy8nO1xuXG5cdFx0XHRcdGxldCBicnNfbGlzdCA9IGJycy5yZW1vdGVzW3JlbW90ZV9uYW1lXTtcblxuXHRcdFx0XHRpZiAoYnJzX2xpc3QubGVuZ3RoID4gNSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxldCBtYXhfZGF0ZV91bml4ID0gMDtcblxuXHRcdFx0XHRcdGJyc19saXN0ID0gYnJzX2xpc3Rcblx0XHRcdFx0XHRcdC5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRsZXQgYm9vbCA9IC9hdXRvXFwvL2kudGVzdCh2YWx1ZSk7XG5cblx0XHRcdFx0XHRcdFx0aWYgKGJvb2wpXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRsZXQgZCA9IGJyYW5jaE5hbWVUb0RhdGUodmFsdWUpO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhkLCBkLnVuaXgoKSk7XG5cblx0XHRcdFx0XHRcdFx0XHRtYXhfZGF0ZV91bml4ID0gTWF0aC5tYXgobWF4X2RhdGVfdW5peCwgZC51bml4KCkpO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIGJvb2w7XG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0LnNsaWNlKDAsIC0zKVxuXHRcdFx0XHRcdDtcblxuXHRcdFx0XHRcdGxldCBtYXhfZGF0ZSA9IG1vbWVudC51bml4KG1heF9kYXRlX3VuaXgpO1xuXG5cdFx0XHRcdFx0YnJzX2xpc3Rcblx0XHRcdFx0XHRcdC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZTogc3RyaW5nLCBpbmRleCwgYXJyYXkpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGxldCBib29sID0gIS9eYXV0b1xcLy9pLnRlc3QodmFsdWUpO1xuXHRcdFx0XHRcdFx0XHRsZXQgZGVsX25hbWUgPSBwcmVmaXggKyB2YWx1ZTtcblxuXHRcdFx0XHRcdFx0XHRmbih2YWx1ZSwgZGVsX25hbWUsIGJvb2wsIHRydWUsIHJlbW90ZV9uYW1lKTtcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdDtcblx0fVxuXG5cdGZ1bmN0aW9uIGZuKHZhbHVlOiBzdHJpbmcsIGRlbF9uYW1lOiBzdHJpbmcsIHNraXA/OiBib29sZWFuLCBpc19yZW1vdGU/OiBib29sZWFuLCByZW1vdGVfbmFtZT86IHN0cmluZylcblx0e1xuXHRcdGxldCB2YWx1ZV9sYyA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoc2tpcClcblx0XHR7XG5cdFx0XHRjb25zb2xlLmxvZyhgc2tpcCAoMSkgJHtkZWxfbmFtZX1gKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoIXZhbHVlIHx8IHZhbHVlX2xjID09IGJyX25hbWUgfHwgdmFsdWVfbGMgPT0gJ21hc3RlcicgfHwgdmFsdWVfbGMgPT0gJ2hlYWQnKVxuXHRcdHtcblx0XHRcdGNvbnNvbGUubG9nKGBza2lwICgyKSAke2RlbF9uYW1lfWApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRlbHNlIGlmIChpc19yZW1vdGUpXG5cdFx0e1xuXHRcdFx0aWYgKCEvYXV0b1xcLy9pLnRlc3QodmFsdWUpIHx8ICFyZW1vdGVfbmFtZSlcblx0XHRcdHtcblx0XHRcdFx0Y29uc29sZS5sb2coYHNraXAgKDMpICR7ZGVsX25hbWV9YCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0bGV0IGQgPSBtb21lbnQodmFsdWUucmVwbGFjZSgvXi4qYXV0b1xcLy8sICcnKSwgREFURV9GT1JNQVQpO1xuXG5cdFx0XHQvL2NvbnNvbGUubG9nKGQpO1xuXHRcdH1cblxuXHRcdGNvbnNvbGUuaW5mbyhgdHJ5IGRlbGV0ZSAke2RlbF9uYW1lfWApO1xuXG5cdFx0aWYgKGlzX3JlbW90ZSlcblx0XHR7XG5cdFx0XHRkZWxldGVCcmFuY2hSZW1vdGUoUkVQT19QQVRILCByZW1vdGVfbmFtZSwgdmFsdWUpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0ZGVsZXRlQnJhbmNoKFJFUE9fUEFUSCwgdmFsdWUpO1xuXHRcdH1cblxuXHRcdGRhdGFfcmV0ID0gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiBkYXRhX3JldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdpdEJyYW5jaE1lcmdlZExpc3QoUkVQT19QQVRIOiBzdHJpbmcsIG5vTWVyZ2VkPzogYm9vbGVhbiwgQlJfTkFNRT86IHN0cmluZylcbntcblx0bGV0IGNwID0gY3Jvc3NTcGF3blN5bmMoJ2dpdCcsIGZpbHRlckFyZ3YoW1xuXHRcdCdicmFuY2gnLFxuXHRcdCctLWZvcm1hdCcsXG5cdFx0JyUocmVmbmFtZSknLFxuXHRcdCctYScsXG5cdFx0bm9NZXJnZWQgPyAnLS1uby1tZXJnZWQnIDogJy0tbWVyZ2VkJyxcblx0XHRCUl9OQU1FLFxuXHRdKSwge1xuXHRcdGN3ZDogUkVQT19QQVRILFxuXHR9KTtcblxuXHRpZiAoY3Auc3RkZXJyICYmIGNwLnN0ZGVyci5sZW5ndGgpXG5cdHtcblx0XHRjb25zb2xlLmVycm9yKGNwLnN0ZGVyci50b1N0cmluZygpKTtcblxuXHRcdHJldHVybiBudWxsXG5cdH1cblxuXHRsZXQgbmFtZSA9IGNyb3NzU3Bhd25PdXRwdXQoY3Auc3Rkb3V0KTtcblxuXHRyZXR1cm4gbmFtZVxuXHRcdC5zcGxpdChMRilcblx0XHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUJyYW5jaEdyb3VwKHI6IHN0cmluZ1tdKToge1xuXHRoZWFkczogc3RyaW5nW107XG5cdHJlbW90ZXM6IHtcblx0XHRvcmlnaW46IHN0cmluZ1tdO1xuXHRcdFtrOiBzdHJpbmddOiBzdHJpbmdbXTtcblx0fTtcbn1cbntcblx0aWYgKCFyIHx8ICFyLmxlbmd0aClcblx0e1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIHIuc29ydCgpLnJlZHVjZShmdW5jdGlvbiAoYSwgYilcblx0e1xuXHRcdGlmICgvXnJlZnNcXC9yZW1vdGVzXFwvKFteXFwvXSspXFwvKC4rKSQvLmV4ZWMoYikpXG5cdFx0e1xuXHRcdFx0bGV0IHsgJDEsICQyIH0gPSBSZWdFeHA7XG5cdFx0XHRhLnJlbW90ZXNbJDFdID0gYS5yZW1vdGVzWyQxXSB8fCBbXTtcblx0XHRcdGEucmVtb3Rlc1skMV0ucHVzaCgkMik7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKC9ecmVmc1xcL2hlYWRzXFwvKC4rKSQvLmV4ZWMoYikpXG5cdFx0e1xuXHRcdFx0bGV0IHsgJDEsICQyIH0gPSBSZWdFeHA7XG5cdFx0XHRhLmhlYWRzLnB1c2goJDEpO1xuXHRcdH1cblxuXHRcdHJldHVybiBhO1xuXHR9LCB7XG5cdFx0aGVhZHM6IFtdLFxuXHRcdHJlbW90ZXM6IHtcblx0XHRcdG9yaWdpbjogW10sXG5cdFx0fSxcblx0fSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdpdENsZWFuQWxsKFJFUE9fUEFUSDogc3RyaW5nKVxue1xuXHRjb25zb2xlLmluZm8oYFtnaXQ6Y2xlYW5dIFJlbW92ZSB1bnRyYWNrZWQgZmlsZXMgZnJvbSB0aGUgd29ya2luZyB0cmVlYCk7XG5cdHJldHVybiBjcm9zc1NwYXduU3luYygnZ2l0JywgW1xuXHRcdCdjbGVhbicsXG5cdFx0Jy1kJyxcblx0XHQnLWZ4Jyxcblx0XSwge1xuXHRcdHN0ZGlvOiAnaW5oZXJpdCcsXG5cdFx0Y3dkOiBSRVBPX1BBVEgsXG5cdH0pO1xufVxuIl19