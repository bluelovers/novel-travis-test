"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NO_PUSH = exports.BR_NAME = exports.NOT_DONE = exports.CLONE_DEPTH = exports.DIST_NOVEL = exports.GITLAB_TOKEN = exports.GITEE_TOKEN = exports.CacheConfig = exports.MyConfig = exports.PROJECT_ROOT = exports.DEBUG = void 0;
const path = require("upath2");
const dotenv_1 = require("dotenv");
const fs = require("fs-extra");
const config_1 = require("@node-novel/task/lib/config");
const project_config_1 = require("../project.config");
const moment = require("moment");
const FastGlob = require("fast-glob");
const log_1 = require("../lib/log");
/**
 * Created by user on 2018/5/17/017.
 */
exports.DEBUG = false;
exports.PROJECT_ROOT = project_config_1.default.project_root;
exports.MyConfig = config_1.loadMainConfig(exports.PROJECT_ROOT);
exports.CacheConfig = config_1.loadCacheConfig(exports.PROJECT_ROOT);
exports.GITEE_TOKEN = process.env.GITEE_TOKEN || '';
exports.GITLAB_TOKEN = process.env.GITLAB_TOKEN || '';
exports.DIST_NOVEL = project_config_1.default.novel_root;
if (!exports.GITEE_TOKEN || !exports.GITLAB_TOKEN) {
    let env = dotenv_1.config({ path: path.join(exports.PROJECT_ROOT, '.env') });
    if (!exports.GITEE_TOKEN && env.parsed && env.parsed.GITEE_TOKEN) {
        exports.GITEE_TOKEN = env.parsed.GITEE_TOKEN;
    }
    if (!exports.GITLAB_TOKEN && env.parsed && env.parsed.GITLAB_TOKEN) {
        exports.GITLAB_TOKEN = env.parsed.GITLAB_TOKEN;
    }
}
exports.CLONE_DEPTH = process.env.CLONE_DEPTH || 50;
if (!/@$/.test(exports.GITEE_TOKEN)) {
    exports.GITEE_TOKEN += '@';
}
if (exports.CacheConfig && exports.CacheConfig.config && exports.CacheConfig.config.done == -1) {
    exports.NOT_DONE = true;
    log_1.default.warn(`上次的任務未完成 本次繼續執行 (1)`);
}
else {
    let ls = FastGlob.sync([
        '*/*.json',
    ], {
        cwd: path.join(project_config_1.default.cache_root, 'files'),
    });
    if (ls.length) {
        exports.NOT_DONE = true;
        log_1.default.warn(`上次的任務未完成 本次繼續執行 (2)`);
        log_1.default.log(ls);
        fs.outputJSONSync(path.join(project_config_1.default.cache_root, 'diff-novel.json'), [], {
            spaces: '\t',
        });
    }
}
exports.BR_NAME = 'auto/' + moment().format('YYYY-MM-DD-HH-mm-ss');
exports.NO_PUSH = exports.MyConfig && exports.MyConfig.config.debug && exports.MyConfig.config.debug.no_push;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQWdDO0FBRWhDLG1DQUFnRDtBQUNoRCwrQkFBK0I7QUFHL0Isd0RBQTBGO0FBRTFGLHNEQUE4QztBQUM5QyxpQ0FBa0M7QUFDbEMsc0NBQXNDO0FBQ3RDLG9DQUFpQztBQUVqQzs7R0FFRztBQUVRLFFBQUEsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUVaLFFBQUEsWUFBWSxHQUFHLHdCQUFhLENBQUMsWUFBWSxDQUFDO0FBRTVDLFFBQUEsUUFBUSxHQUFHLHVCQUFjLENBQUMsb0JBQVksQ0FBQyxDQUFDO0FBQ3hDLFFBQUEsV0FBVyxHQUFHLHdCQUFlLENBQUMsb0JBQVksQ0FBQyxDQUFDO0FBRTVDLFFBQUEsV0FBVyxHQUFXLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztBQUNwRCxRQUFBLFlBQVksR0FBVyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUM7QUFFcEQsUUFBQSxVQUFVLEdBQUcsd0JBQWEsQ0FBQyxVQUFVLENBQUM7QUFFbkQsSUFBSSxDQUFDLG1CQUFXLElBQUksQ0FBQyxvQkFBWSxFQUNqQztJQUNDLElBQUksR0FBRyxHQUFHLGVBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFZLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWxFLElBQUksQ0FBQyxtQkFBVyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQ3hEO1FBQ0MsbUJBQVcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztLQUNyQztJQUVELElBQUksQ0FBQyxvQkFBWSxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQzFEO1FBQ0Msb0JBQVksR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztLQUN2QztDQUNEO0FBRVUsUUFBQSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO0FBRXZELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFXLENBQUMsRUFDM0I7SUFDQyxtQkFBVyxJQUFJLEdBQUcsQ0FBQztDQUNuQjtBQUlELElBQUksbUJBQVcsSUFBSSxtQkFBVyxDQUFDLE1BQU0sSUFBSSxtQkFBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQ3RFO0lBQ0MsZ0JBQVEsR0FBRyxJQUFJLENBQUM7SUFFaEIsYUFBTyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0NBQ3BDO0tBRUQ7SUFDQyxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3RCLFVBQVU7S0FDVixFQUFFO1FBQ0YsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQWEsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDO0tBQ2pELENBQUMsQ0FBQztJQUVILElBQUksRUFBRSxDQUFDLE1BQU0sRUFDYjtRQUNDLGdCQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLGFBQU8sQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUVwQyxhQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWhCLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBYSxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsRUFBRTtZQUM3RSxNQUFNLEVBQUUsSUFBSTtTQUNaLENBQUMsQ0FBQztLQUNIO0NBQ0Q7QUFFWSxRQUFBLE9BQU8sR0FBRyxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFFM0QsUUFBQSxPQUFPLEdBQUcsZ0JBQVEsSUFBSSxnQkFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksZ0JBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoID0gcmVxdWlyZSgndXBhdGgyJyk7XG5pbXBvcnQgZ2l0Um9vdCBmcm9tICdnaXQtcm9vdDInO1xuaW1wb3J0IHsgY29uZmlnIGFzIGRvdGVudkNvbmZpZyB9IGZyb20gJ2RvdGVudic7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBjcm9zc1NwYXduQXN5bmMsIGNyb3NzU3Bhd25TeW5jIH0gZnJvbSAnLi4nO1xuaW1wb3J0IHsgY3Jvc3NTcGF3bk91dHB1dCwgaXNHaXRSb290IH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgbG9hZENhY2hlQ29uZmlnLCBsb2FkTWFpbkNvbmZpZywgbG9hZENvbmZpZyB9IGZyb20gJ0Bub2RlLW5vdmVsL3Rhc2svbGliL2NvbmZpZyc7XG5pbXBvcnQgeyBJQ29uZmlnIH0gZnJvbSAnQG5vZGUtbm92ZWwvdGFzayc7XG5pbXBvcnQgUHJvamVjdENvbmZpZyBmcm9tICcuLi9wcm9qZWN0LmNvbmZpZyc7XG5pbXBvcnQgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5pbXBvcnQgKiBhcyBGYXN0R2xvYiBmcm9tICdmYXN0LWdsb2InO1xuaW1wb3J0IGNvbnNvbGUgZnJvbSAnLi4vbGliL2xvZyc7XG5cbi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTgvNS8xNy8wMTcuXG4gKi9cblxuZXhwb3J0IGxldCBERUJVRyA9IGZhbHNlO1xuXG5leHBvcnQgY29uc3QgUFJPSkVDVF9ST09UID0gUHJvamVjdENvbmZpZy5wcm9qZWN0X3Jvb3Q7XG5cbmV4cG9ydCBsZXQgTXlDb25maWcgPSBsb2FkTWFpbkNvbmZpZyhQUk9KRUNUX1JPT1QpO1xuZXhwb3J0IGxldCBDYWNoZUNvbmZpZyA9IGxvYWRDYWNoZUNvbmZpZyhQUk9KRUNUX1JPT1QpO1xuXG5leHBvcnQgbGV0IEdJVEVFX1RPS0VOOiBzdHJpbmcgPSBwcm9jZXNzLmVudi5HSVRFRV9UT0tFTiB8fCAnJztcbmV4cG9ydCBsZXQgR0lUTEFCX1RPS0VOOiBzdHJpbmcgPSBwcm9jZXNzLmVudi5HSVRMQUJfVE9LRU4gfHwgJyc7XG5cbmV4cG9ydCBjb25zdCBESVNUX05PVkVMID0gUHJvamVjdENvbmZpZy5ub3ZlbF9yb290O1xuXG5pZiAoIUdJVEVFX1RPS0VOIHx8ICFHSVRMQUJfVE9LRU4pXG57XG5cdGxldCBlbnYgPSBkb3RlbnZDb25maWcoeyBwYXRoOiBwYXRoLmpvaW4oUFJPSkVDVF9ST09ULCAnLmVudicpIH0pO1xuXG5cdGlmICghR0lURUVfVE9LRU4gJiYgZW52LnBhcnNlZCAmJiBlbnYucGFyc2VkLkdJVEVFX1RPS0VOKVxuXHR7XG5cdFx0R0lURUVfVE9LRU4gPSBlbnYucGFyc2VkLkdJVEVFX1RPS0VOO1xuXHR9XG5cblx0aWYgKCFHSVRMQUJfVE9LRU4gJiYgZW52LnBhcnNlZCAmJiBlbnYucGFyc2VkLkdJVExBQl9UT0tFTilcblx0e1xuXHRcdEdJVExBQl9UT0tFTiA9IGVudi5wYXJzZWQuR0lUTEFCX1RPS0VOO1xuXHR9XG59XG5cbmV4cG9ydCBsZXQgQ0xPTkVfREVQVEggPSBwcm9jZXNzLmVudi5DTE9ORV9ERVBUSCB8fCA1MDtcblxuaWYgKCEvQCQvLnRlc3QoR0lURUVfVE9LRU4pKVxue1xuXHRHSVRFRV9UT0tFTiArPSAnQCc7XG59XG5cbmV4cG9ydCBsZXQgTk9UX0RPTkU6IGJvb2xlYW47XG5cbmlmIChDYWNoZUNvbmZpZyAmJiBDYWNoZUNvbmZpZy5jb25maWcgJiYgQ2FjaGVDb25maWcuY29uZmlnLmRvbmUgPT0gLTEpXG57XG5cdE5PVF9ET05FID0gdHJ1ZTtcblxuXHRjb25zb2xlLndhcm4oYOS4iuasoeeahOS7u+WLmeacquWujOaIkCDmnKzmrKHnubznuozln7fooYwgKDEpYCk7XG59XG5lbHNlXG57XG5cdGxldCBscyA9IEZhc3RHbG9iLnN5bmMoW1xuXHRcdCcqLyouanNvbicsXG5cdF0sIHtcblx0XHRjd2Q6IHBhdGguam9pbihQcm9qZWN0Q29uZmlnLmNhY2hlX3Jvb3QsICdmaWxlcycpLFxuXHR9KTtcblxuXHRpZiAobHMubGVuZ3RoKVxuXHR7XG5cdFx0Tk9UX0RPTkUgPSB0cnVlO1xuXHRcdGNvbnNvbGUud2Fybihg5LiK5qyh55qE5Lu75YuZ5pyq5a6M5oiQIOacrOasoee5vOe6jOWft+ihjCAoMilgKTtcblxuXHRcdGNvbnNvbGUubG9nKGxzKTtcblxuXHRcdGZzLm91dHB1dEpTT05TeW5jKHBhdGguam9pbihQcm9qZWN0Q29uZmlnLmNhY2hlX3Jvb3QsICdkaWZmLW5vdmVsLmpzb24nKSwgW10sIHtcblx0XHRcdHNwYWNlczogJ1xcdCcsXG5cdFx0fSk7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IEJSX05BTUUgPSAnYXV0by8nICsgbW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLURELUhILW1tLXNzJyk7XG5cbmV4cG9ydCBjb25zdCBOT19QVVNIID0gTXlDb25maWcgJiYgTXlDb25maWcuY29uZmlnLmRlYnVnICYmIE15Q29uZmlnLmNvbmZpZy5kZWJ1Zy5ub19wdXNoO1xuIl19