"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("upath2");
const dotenv_1 = require("dotenv");
const config_1 = require("@node-novel/task/lib/config");
const project_config_1 = require("../project.config");
const moment = require("moment");
const FastGlob = require("fast-glob");
const log_1 = require("../lib/log");
/**
 * Created by user on 2018/5/17/017.
 */
exports.DEBUG = false;
exports.PROJECT_ROOT = project_config_1.default.project_root;
exports.MyConfig = config_1.loadMainConfig(exports.PROJECT_ROOT);
exports.CacheConfig = config_1.loadCacheConfig(exports.PROJECT_ROOT);
exports.GITEE_TOKEN = process.env.GITEE_TOKEN || '';
exports.GITLAB_TOKEN = process.env.GITLAB_TOKEN || '';
exports.DIST_NOVEL = project_config_1.default.novel_root;
if (!exports.GITEE_TOKEN || !exports.GITLAB_TOKEN) {
    let env = dotenv_1.config({ path: path.join(exports.PROJECT_ROOT, '.env') });
    if (!exports.GITEE_TOKEN && env.parsed && env.parsed.GITEE_TOKEN) {
        exports.GITEE_TOKEN = env.parsed.GITEE_TOKEN;
    }
    if (!exports.GITLAB_TOKEN && env.parsed && env.parsed.GITLAB_TOKEN) {
        exports.GITLAB_TOKEN = env.parsed.GITLAB_TOKEN;
    }
}
exports.CLONE_DEPTH = process.env.CLONE_DEPTH || 50;
if (!/@$/.test(exports.GITEE_TOKEN)) {
    exports.GITEE_TOKEN += '@';
}
if (exports.CacheConfig && exports.CacheConfig.config && exports.CacheConfig.config.done == -1) {
    exports.NOT_DONE = true;
    log_1.default.warn(`上次的任務未完成 本次繼續執行 (1)`);
}
else {
    let ls = FastGlob.sync([
        '*/*.json',
    ], {
        cwd: path.join(project_config_1.default.cache_root, 'files'),
    });
    if (ls.length) {
        exports.NOT_DONE = true;
        log_1.default.warn(`上次的任務未完成 本次繼續執行 (2)`);
        log_1.default.log(ls);
    }
}
exports.BR_NAME = 'auto/' + moment().format('YYYY-MM-DD-HH-mm-ss');
exports.NO_PUSH = exports.MyConfig && exports.MyConfig.config.debug && exports.MyConfig.config.debug.no_push;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBZ0M7QUFFaEMsbUNBQWdEO0FBSWhELHdEQUEwRjtBQUUxRixzREFBOEM7QUFDOUMsaUNBQWtDO0FBQ2xDLHNDQUFzQztBQUN0QyxvQ0FBaUM7QUFFakM7O0dBRUc7QUFFUSxRQUFBLEtBQUssR0FBRyxLQUFLLENBQUM7QUFFWixRQUFBLFlBQVksR0FBRyx3QkFBYSxDQUFDLFlBQVksQ0FBQztBQUU1QyxRQUFBLFFBQVEsR0FBRyx1QkFBYyxDQUFDLG9CQUFZLENBQUMsQ0FBQztBQUN4QyxRQUFBLFdBQVcsR0FBRyx3QkFBZSxDQUFDLG9CQUFZLENBQUMsQ0FBQztBQUU1QyxRQUFBLFdBQVcsR0FBVyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7QUFDcEQsUUFBQSxZQUFZLEdBQVcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLElBQUksRUFBRSxDQUFDO0FBRXBELFFBQUEsVUFBVSxHQUFHLHdCQUFhLENBQUMsVUFBVSxDQUFDO0FBRW5ELElBQUksQ0FBQyxtQkFBVyxJQUFJLENBQUMsb0JBQVksRUFDakM7SUFDQyxJQUFJLEdBQUcsR0FBRyxlQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBWSxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVsRSxJQUFJLENBQUMsbUJBQVcsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUN4RDtRQUNDLG1CQUFXLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7S0FDckM7SUFFRCxJQUFJLENBQUMsb0JBQVksSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUMxRDtRQUNDLG9CQUFZLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUM7S0FDdkM7Q0FDRDtBQUVVLFFBQUEsV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztBQUV2RCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBVyxDQUFDLEVBQzNCO0lBQ0MsbUJBQVcsSUFBSSxHQUFHLENBQUM7Q0FDbkI7QUFJRCxJQUFJLG1CQUFXLElBQUksbUJBQVcsQ0FBQyxNQUFNLElBQUksbUJBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxFQUN0RTtJQUNDLGdCQUFRLEdBQUcsSUFBSSxDQUFDO0lBRWhCLGFBQU8sQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztDQUNwQztLQUVEO0lBQ0MsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUN0QixVQUFVO0tBQ1YsRUFBRTtRQUNGLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUFhLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQztLQUNqRCxDQUFDLENBQUM7SUFFSCxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQ2I7UUFDQyxnQkFBUSxHQUFHLElBQUksQ0FBQztRQUNoQixhQUFPLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFFcEMsYUFBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNoQjtDQUNEO0FBRVksUUFBQSxPQUFPLEdBQUcsT0FBTyxHQUFHLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBRTNELFFBQUEsT0FBTyxHQUFHLGdCQUFRLElBQUksZ0JBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLGdCQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3VwYXRoMicpO1xuaW1wb3J0IGdpdFJvb3QgZnJvbSAnZ2l0LXJvb3QyJztcbmltcG9ydCB7IGNvbmZpZyBhcyBkb3RlbnZDb25maWcgfSBmcm9tICdkb3RlbnYnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgY3Jvc3NTcGF3bkFzeW5jLCBjcm9zc1NwYXduU3luYyB9IGZyb20gJy4uJztcbmltcG9ydCB7IGNyb3NzU3Bhd25PdXRwdXQsIGlzR2l0Um9vdCB9IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IGxvYWRDYWNoZUNvbmZpZywgbG9hZE1haW5Db25maWcsIGxvYWRDb25maWcgfSBmcm9tICdAbm9kZS1ub3ZlbC90YXNrL2xpYi9jb25maWcnO1xuaW1wb3J0IHsgSUNvbmZpZyB9IGZyb20gJ0Bub2RlLW5vdmVsL3Rhc2snO1xuaW1wb3J0IFByb2plY3RDb25maWcgZnJvbSAnLi4vcHJvamVjdC5jb25maWcnO1xuaW1wb3J0IG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuaW1wb3J0ICogYXMgRmFzdEdsb2IgZnJvbSAnZmFzdC1nbG9iJztcbmltcG9ydCBjb25zb2xlIGZyb20gJy4uL2xpYi9sb2cnO1xuXG4vKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE4LzUvMTcvMDE3LlxuICovXG5cbmV4cG9ydCBsZXQgREVCVUcgPSBmYWxzZTtcblxuZXhwb3J0IGNvbnN0IFBST0pFQ1RfUk9PVCA9IFByb2plY3RDb25maWcucHJvamVjdF9yb290O1xuXG5leHBvcnQgbGV0IE15Q29uZmlnID0gbG9hZE1haW5Db25maWcoUFJPSkVDVF9ST09UKTtcbmV4cG9ydCBsZXQgQ2FjaGVDb25maWcgPSBsb2FkQ2FjaGVDb25maWcoUFJPSkVDVF9ST09UKTtcblxuZXhwb3J0IGxldCBHSVRFRV9UT0tFTjogc3RyaW5nID0gcHJvY2Vzcy5lbnYuR0lURUVfVE9LRU4gfHwgJyc7XG5leHBvcnQgbGV0IEdJVExBQl9UT0tFTjogc3RyaW5nID0gcHJvY2Vzcy5lbnYuR0lUTEFCX1RPS0VOIHx8ICcnO1xuXG5leHBvcnQgY29uc3QgRElTVF9OT1ZFTCA9IFByb2plY3RDb25maWcubm92ZWxfcm9vdDtcblxuaWYgKCFHSVRFRV9UT0tFTiB8fCAhR0lUTEFCX1RPS0VOKVxue1xuXHRsZXQgZW52ID0gZG90ZW52Q29uZmlnKHsgcGF0aDogcGF0aC5qb2luKFBST0pFQ1RfUk9PVCwgJy5lbnYnKSB9KTtcblxuXHRpZiAoIUdJVEVFX1RPS0VOICYmIGVudi5wYXJzZWQgJiYgZW52LnBhcnNlZC5HSVRFRV9UT0tFTilcblx0e1xuXHRcdEdJVEVFX1RPS0VOID0gZW52LnBhcnNlZC5HSVRFRV9UT0tFTjtcblx0fVxuXG5cdGlmICghR0lUTEFCX1RPS0VOICYmIGVudi5wYXJzZWQgJiYgZW52LnBhcnNlZC5HSVRMQUJfVE9LRU4pXG5cdHtcblx0XHRHSVRMQUJfVE9LRU4gPSBlbnYucGFyc2VkLkdJVExBQl9UT0tFTjtcblx0fVxufVxuXG5leHBvcnQgbGV0IENMT05FX0RFUFRIID0gcHJvY2Vzcy5lbnYuQ0xPTkVfREVQVEggfHwgNTA7XG5cbmlmICghL0AkLy50ZXN0KEdJVEVFX1RPS0VOKSlcbntcblx0R0lURUVfVE9LRU4gKz0gJ0AnO1xufVxuXG5leHBvcnQgbGV0IE5PVF9ET05FOiBib29sZWFuO1xuXG5pZiAoQ2FjaGVDb25maWcgJiYgQ2FjaGVDb25maWcuY29uZmlnICYmIENhY2hlQ29uZmlnLmNvbmZpZy5kb25lID09IC0xKVxue1xuXHROT1RfRE9ORSA9IHRydWU7XG5cblx0Y29uc29sZS53YXJuKGDkuIrmrKHnmoTku7vli5nmnKrlrozmiJAg5pys5qyh57m857qM5Z+36KGMICgxKWApO1xufVxuZWxzZVxue1xuXHRsZXQgbHMgPSBGYXN0R2xvYi5zeW5jKFtcblx0XHQnKi8qLmpzb24nLFxuXHRdLCB7XG5cdFx0Y3dkOiBwYXRoLmpvaW4oUHJvamVjdENvbmZpZy5jYWNoZV9yb290LCAnZmlsZXMnKSxcblx0fSk7XG5cblx0aWYgKGxzLmxlbmd0aClcblx0e1xuXHRcdE5PVF9ET05FID0gdHJ1ZTtcblx0XHRjb25zb2xlLndhcm4oYOS4iuasoeeahOS7u+WLmeacquWujOaIkCDmnKzmrKHnubznuozln7fooYwgKDIpYCk7XG5cblx0XHRjb25zb2xlLmxvZyhscyk7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IEJSX05BTUUgPSAnYXV0by8nICsgbW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLURELUhILW1tLXNzJyk7XG5cbmV4cG9ydCBjb25zdCBOT19QVVNIID0gTXlDb25maWcgJiYgTXlDb25maWcuY29uZmlnLmRlYnVnICYmIE15Q29uZmlnLmNvbmZpZy5kZWJ1Zy5ub19wdXNoO1xuIl19