"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DIST_NOVEL = exports.GITEE_TOKEN = exports.CacheConfig = exports.MyConfig = exports.PROJECT_ROOT = void 0;
const path = require("upath2");
const fs = require("fs-extra");
const config_1 = require("@node-novel/task/lib/config");
const novel_stat_1 = require("../lib/cache/novel-stat");
const project_config_1 = require("../project.config");
const moment = require("moment");
const FastGlob = require("fast-glob");
/**
 * Created by user on 2018/7/22/022.
 */
exports.PROJECT_ROOT = project_config_1.default.project_root;
exports.MyConfig = config_1.loadMainConfig(exports.PROJECT_ROOT);
exports.CacheConfig = config_1.loadCacheConfig(exports.PROJECT_ROOT);
exports.GITEE_TOKEN = process.env.GITEE_TOKEN || '';
exports.DIST_NOVEL = project_config_1.default.novel_root;
console.time('bugfix');
let ls = FastGlob.sync([
    'docs/*.json',
], {
    cwd: path.join(project_config_1.default.cache_root, 'files'),
    absolute: true,
    onlyFiles: true,
});
if (ls.length) {
    ls.forEach(function (file) {
        console.log('[delete]', file);
        fs.removeSync(file);
    });
}
{
    let now = moment();
    let now_unix = now.unix();
    const novelStatCache = novel_stat_1.getNovelStatCache();
    const timestamp = novelStatCache.timestamp;
    let _ok;
    Object.entries(novelStatCache.data.history)
        .forEach(function ([timestamp, stat]) {
        let n_timestamp = parseInt(timestamp);
        if (now_unix >= n_timestamp) {
            let ms = moment.unix(n_timestamp).valueOf();
            delete novelStatCache.data.history[timestamp];
            novelStatCache.data.history[ms] = stat;
            _ok = true;
        }
    });
    Object.entries(novelStatCache.data.novels)
        .forEach(([pathMain, data], i) => {
        Object.entries(novelStatCache.data.novels[pathMain])
            .forEach(([novelID, data]) => {
            let ks = [
                'init_date',
                'epub_date',
                'segment_date',
            ];
            ks.forEach(k => {
                if (data[k] && now_unix >= data[k]) {
                    // @ts-ignore
                    let ms = moment.unix(data[k]).valueOf();
                    data[k] = ms;
                    _ok = true;
                }
            });
        });
    });
    if (_ok) {
        novelStatCache.save();
    }
}
console.timeEnd('bugfix');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2J1Z2ZpeC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIl9idWdmaXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQWdDO0FBR2hDLCtCQUErQjtBQUcvQix3REFBMEY7QUFFMUYsd0RBQTREO0FBQzVELHNEQUE4QztBQUM5QyxpQ0FBa0M7QUFDbEMsc0NBQXNDO0FBRXRDOztHQUVHO0FBRVUsUUFBQSxZQUFZLEdBQUcsd0JBQWEsQ0FBQyxZQUFZLENBQUM7QUFFNUMsUUFBQSxRQUFRLEdBQUcsdUJBQWMsQ0FBQyxvQkFBWSxDQUFDLENBQUM7QUFDeEMsUUFBQSxXQUFXLEdBQUcsd0JBQWUsQ0FBQyxvQkFBWSxDQUFDLENBQUM7QUFFNUMsUUFBQSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO0FBQzFDLFFBQUEsVUFBVSxHQUFHLHdCQUFhLENBQUMsVUFBVSxDQUFDO0FBRW5ELE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFdkIsSUFBSSxFQUFFLEdBQWEsUUFBUSxDQUFDLElBQUksQ0FBQztJQUNoQyxhQUFhO0NBQ2IsRUFBRTtJQUNGLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUFhLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQztJQUNqRCxRQUFRLEVBQUUsSUFBSTtJQUNkLFNBQVMsRUFBRSxJQUFJO0NBQ2YsQ0FBQyxDQUFDO0FBRUgsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUNiO0lBQ0MsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUk7UUFFeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNwQixDQUFDLENBQUMsQ0FBQTtDQUNGO0FBRUQ7SUFDQyxJQUFJLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQztJQUNuQixJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFMUIsTUFBTSxjQUFjLEdBQUcsOEJBQWlCLEVBQUUsQ0FBQztJQUUzQyxNQUFNLFNBQVMsR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDO0lBRTNDLElBQUksR0FBWSxDQUFDO0lBRWpCLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDekMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDO1FBRW5DLElBQUksV0FBVyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV0QyxJQUFJLFFBQVEsSUFBSSxXQUFXLEVBQzNCO1lBQ0MsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUU1QyxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzlDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUV2QyxHQUFHLEdBQUcsSUFBSSxDQUFDO1NBQ1g7SUFFRixDQUFDLENBQUMsQ0FDRjtJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDeEMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFFaEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNsRCxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1lBRTVCLElBQUksRUFBRSxHQUEwQjtnQkFDL0IsV0FBVztnQkFDWCxXQUFXO2dCQUNYLGNBQWM7YUFDZCxDQUFDO1lBRUYsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFFZCxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNsQztvQkFDQyxhQUFhO29CQUNiLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7b0JBRXhDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7b0JBRWIsR0FBRyxHQUFHLElBQUksQ0FBQztpQkFDWDtZQUVGLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0Y7SUFDRixDQUFDLENBQUMsQ0FDRjtJQUVELElBQUksR0FBRyxFQUNQO1FBQ0MsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ3RCO0NBQ0Q7QUFFRCxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggPSByZXF1aXJlKCd1cGF0aDInKTtcbmltcG9ydCBnaXRSb290IGZyb20gJ2dpdC1yb290Mic7XG5pbXBvcnQgeyBjb25maWcgYXMgZG90ZW52Q29uZmlnIH0gZnJvbSAnZG90ZW52JztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB7IGNyb3NzU3Bhd25Bc3luYywgY3Jvc3NTcGF3blN5bmMgfSBmcm9tICcuLic7XG5pbXBvcnQgeyBjcm9zc1NwYXduT3V0cHV0LCBpc0dpdFJvb3QgfSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBsb2FkQ2FjaGVDb25maWcsIGxvYWRNYWluQ29uZmlnLCBsb2FkQ29uZmlnIH0gZnJvbSAnQG5vZGUtbm92ZWwvdGFzay9saWIvY29uZmlnJztcbmltcG9ydCB7IElDb25maWcgfSBmcm9tICdAbm9kZS1ub3ZlbC90YXNrJztcbmltcG9ydCB7IGdldE5vdmVsU3RhdENhY2hlIH0gZnJvbSAnLi4vbGliL2NhY2hlL25vdmVsLXN0YXQnO1xuaW1wb3J0IFByb2plY3RDb25maWcgZnJvbSAnLi4vcHJvamVjdC5jb25maWcnO1xuaW1wb3J0IG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuaW1wb3J0ICogYXMgRmFzdEdsb2IgZnJvbSAnZmFzdC1nbG9iJztcblxuLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC83LzIyLzAyMi5cbiAqL1xuXG5leHBvcnQgY29uc3QgUFJPSkVDVF9ST09UID0gUHJvamVjdENvbmZpZy5wcm9qZWN0X3Jvb3Q7XG5cbmV4cG9ydCBsZXQgTXlDb25maWcgPSBsb2FkTWFpbkNvbmZpZyhQUk9KRUNUX1JPT1QpO1xuZXhwb3J0IGxldCBDYWNoZUNvbmZpZyA9IGxvYWRDYWNoZUNvbmZpZyhQUk9KRUNUX1JPT1QpO1xuXG5leHBvcnQgbGV0IEdJVEVFX1RPS0VOID0gcHJvY2Vzcy5lbnYuR0lURUVfVE9LRU4gfHwgJyc7XG5leHBvcnQgY29uc3QgRElTVF9OT1ZFTCA9IFByb2plY3RDb25maWcubm92ZWxfcm9vdDtcblxuY29uc29sZS50aW1lKCdidWdmaXgnKTtcblxubGV0IGxzOiBzdHJpbmdbXSA9IEZhc3RHbG9iLnN5bmMoW1xuXHQnZG9jcy8qLmpzb24nLFxuXSwge1xuXHRjd2Q6IHBhdGguam9pbihQcm9qZWN0Q29uZmlnLmNhY2hlX3Jvb3QsICdmaWxlcycpLFxuXHRhYnNvbHV0ZTogdHJ1ZSxcblx0b25seUZpbGVzOiB0cnVlLFxufSk7XG5cbmlmIChscy5sZW5ndGgpXG57XG5cdGxzLmZvckVhY2goZnVuY3Rpb24gKGZpbGUpXG5cdHtcblx0XHRjb25zb2xlLmxvZygnW2RlbGV0ZV0nLCBmaWxlKTtcblx0XHRmcy5yZW1vdmVTeW5jKGZpbGUpXG5cdH0pXG59XG5cbntcblx0bGV0IG5vdyA9IG1vbWVudCgpO1xuXHRsZXQgbm93X3VuaXggPSBub3cudW5peCgpO1xuXG5cdGNvbnN0IG5vdmVsU3RhdENhY2hlID0gZ2V0Tm92ZWxTdGF0Q2FjaGUoKTtcblxuXHRjb25zdCB0aW1lc3RhbXAgPSBub3ZlbFN0YXRDYWNoZS50aW1lc3RhbXA7XG5cblx0bGV0IF9vazogYm9vbGVhbjtcblxuXHRPYmplY3QuZW50cmllcyhub3ZlbFN0YXRDYWNoZS5kYXRhLmhpc3RvcnkpXG5cdFx0LmZvckVhY2goZnVuY3Rpb24gKFt0aW1lc3RhbXAsIHN0YXRdKVxuXHRcdHtcblx0XHRcdGxldCBuX3RpbWVzdGFtcCA9IHBhcnNlSW50KHRpbWVzdGFtcCk7XG5cblx0XHRcdGlmIChub3dfdW5peCA+PSBuX3RpbWVzdGFtcClcblx0XHRcdHtcblx0XHRcdFx0bGV0IG1zID0gbW9tZW50LnVuaXgobl90aW1lc3RhbXApLnZhbHVlT2YoKTtcblxuXHRcdFx0XHRkZWxldGUgbm92ZWxTdGF0Q2FjaGUuZGF0YS5oaXN0b3J5W3RpbWVzdGFtcF07XG5cdFx0XHRcdG5vdmVsU3RhdENhY2hlLmRhdGEuaGlzdG9yeVttc10gPSBzdGF0O1xuXG5cdFx0XHRcdF9vayA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHR9KVxuXHQ7XG5cblx0T2JqZWN0LmVudHJpZXMobm92ZWxTdGF0Q2FjaGUuZGF0YS5ub3ZlbHMpXG5cdFx0LmZvckVhY2goKFtwYXRoTWFpbiwgZGF0YV0sIGkpID0+XG5cdFx0e1xuXHRcdFx0T2JqZWN0LmVudHJpZXMobm92ZWxTdGF0Q2FjaGUuZGF0YS5ub3ZlbHNbcGF0aE1haW5dKVxuXHRcdFx0XHQuZm9yRWFjaCgoW25vdmVsSUQsIGRhdGFdKSA9PlxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGV0IGtzOiAoa2V5b2YgdHlwZW9mIGRhdGEpW10gPSBbXG5cdFx0XHRcdFx0XHQnaW5pdF9kYXRlJyxcblx0XHRcdFx0XHRcdCdlcHViX2RhdGUnLFxuXHRcdFx0XHRcdFx0J3NlZ21lbnRfZGF0ZScsXG5cdFx0XHRcdFx0XTtcblxuXHRcdFx0XHRcdGtzLmZvckVhY2goayA9PiB7XG5cblx0XHRcdFx0XHRcdGlmIChkYXRhW2tdICYmIG5vd191bml4ID49IGRhdGFba10pXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0XHRcdFx0bGV0IG1zID0gbW9tZW50LnVuaXgoZGF0YVtrXSkudmFsdWVPZigpO1xuXG5cdFx0XHRcdFx0XHRcdGRhdGFba10gPSBtcztcblxuXHRcdFx0XHRcdFx0XHRfb2sgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pXG5cdFx0XHQ7XG5cdFx0fSlcblx0O1xuXG5cdGlmIChfb2spXG5cdHtcblx0XHRub3ZlbFN0YXRDYWNoZS5zYXZlKCk7XG5cdH1cbn1cblxuY29uc29sZS50aW1lRW5kKCdidWdmaXgnKTtcbiJdfQ==