"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("upath2");
const fs = require("fs-extra");
const config_1 = require("@node-novel/task/lib/config");
const novel_stat_1 = require("../lib/cache/novel-stat");
const project_config_1 = require("../project.config");
const moment = require("moment");
const FastGlob = require("fast-glob");
/**
 * Created by user on 2018/7/22/022.
 */
exports.PROJECT_ROOT = project_config_1.default.project_root;
exports.MyConfig = config_1.loadMainConfig(exports.PROJECT_ROOT);
exports.CacheConfig = config_1.loadCacheConfig(exports.PROJECT_ROOT);
exports.GITEE_TOKEN = process.env.GITEE_TOKEN || '';
exports.DIST_NOVEL = project_config_1.default.novel_root;
console.time('bugfix');
let ls = FastGlob.sync([
    'docs/*.json',
], {
    cwd: path.join(project_config_1.default.cache_root, 'files'),
    absolute: true,
    onlyFiles: true,
});
if (ls.length) {
    ls.forEach(function (file) {
        console.log('[delete]', file);
        fs.removeSync(file);
    });
}
{
    let now = moment();
    let now_unix = now.unix();
    const novelStatCache = novel_stat_1.getNovelStatCache();
    const timestamp = novelStatCache.timestamp;
    let _ok;
    Object.entries(novelStatCache.data.history)
        .forEach(function ([timestamp, stat]) {
        let n_timestamp = parseInt(timestamp);
        if (now_unix >= n_timestamp) {
            let ms = moment.unix(n_timestamp).valueOf();
            delete novelStatCache.data.history[timestamp];
            novelStatCache.data.history[ms] = stat;
            _ok = true;
        }
    });
    Object.entries(novelStatCache.data.novels)
        .forEach(([pathMain, data], i) => {
        Object.entries(novelStatCache.data.novels[pathMain])
            .forEach(([novelID, data]) => {
            let ks = [
                'init_date',
                'epub_date',
                'segment_date',
            ];
            ks.forEach(k => {
                if (data[k] && now_unix >= data[k]) {
                    let ms = moment.unix(data[k]).valueOf();
                    data[k] = ms;
                    _ok = true;
                }
            });
        });
    });
    if (_ok) {
        novelStatCache.save();
    }
}
console.timeEnd('bugfix');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2J1Z2ZpeC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIl9idWdmaXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBZ0M7QUFJaEMsK0JBQStCO0FBRy9CLHdEQUEwRjtBQUUxRix3REFBNEQ7QUFDNUQsc0RBQThDO0FBQzlDLGlDQUFrQztBQUNsQyxzQ0FBc0M7QUFFdEM7O0dBRUc7QUFFVSxRQUFBLFlBQVksR0FBRyx3QkFBYSxDQUFDLFlBQVksQ0FBQztBQUU1QyxRQUFBLFFBQVEsR0FBRyx1QkFBYyxDQUFDLG9CQUFZLENBQUMsQ0FBQztBQUN4QyxRQUFBLFdBQVcsR0FBRyx3QkFBZSxDQUFDLG9CQUFZLENBQUMsQ0FBQztBQUU1QyxRQUFBLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7QUFDMUMsUUFBQSxVQUFVLEdBQUcsd0JBQWEsQ0FBQyxVQUFVLENBQUM7QUFFbkQsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUV2QixJQUFJLEVBQUUsR0FBYSxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ2hDLGFBQWE7Q0FDYixFQUFFO0lBQ0YsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQWEsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDO0lBQ2pELFFBQVEsRUFBRSxJQUFJO0lBQ2QsU0FBUyxFQUFFLElBQUk7Q0FDZixDQUFDLENBQUM7QUFFSCxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQ2I7SUFDQyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSTtRQUV4QixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5QixFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3BCLENBQUMsQ0FBQyxDQUFBO0NBQ0Y7QUFFRDtJQUNDLElBQUksR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFDO0lBQ25CLElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUUxQixNQUFNLGNBQWMsR0FBRyw4QkFBaUIsRUFBRSxDQUFDO0lBRTNDLE1BQU0sU0FBUyxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUM7SUFFM0MsSUFBSSxHQUFZLENBQUM7SUFFakIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUN6QyxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUM7UUFFbkMsSUFBSSxXQUFXLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXRDLElBQUksUUFBUSxJQUFJLFdBQVcsRUFDM0I7WUFDQyxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRTVDLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDOUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBRXZDLEdBQUcsR0FBRyxJQUFJLENBQUM7U0FDWDtJQUVGLENBQUMsQ0FBQyxDQUNGO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUN4QyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUVoQyxNQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ2xELE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFFNUIsSUFBSSxFQUFFLEdBQTBCO2dCQUMvQixXQUFXO2dCQUNYLFdBQVc7Z0JBQ1gsY0FBYzthQUNkLENBQUM7WUFFRixFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUVkLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ2xDO29CQUNDLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7b0JBRXhDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7b0JBRWIsR0FBRyxHQUFHLElBQUksQ0FBQztpQkFDWDtZQUVGLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0Y7SUFDRixDQUFDLENBQUMsQ0FDRjtJQUVELElBQUksR0FBRyxFQUNQO1FBQ0MsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ3RCO0NBQ0Q7QUFFRCxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggPSByZXF1aXJlKCd1cGF0aDInKTtcbmltcG9ydCAqIGFzIGNyb3NzU3Bhd24gZnJvbSAnY3Jvc3Mtc3Bhd24nO1xuaW1wb3J0IGdpdFJvb3QgZnJvbSAnZ2l0LXJvb3QyJztcbmltcG9ydCB7IGNvbmZpZyBhcyBkb3RlbnZDb25maWcgfSBmcm9tICdkb3RlbnYnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgY3Jvc3NTcGF3bkFzeW5jLCBjcm9zc1NwYXduU3luYyB9IGZyb20gJy4uJztcbmltcG9ydCB7IGNyb3NzU3Bhd25PdXRwdXQsIGlzR2l0Um9vdCB9IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IGxvYWRDYWNoZUNvbmZpZywgbG9hZE1haW5Db25maWcsIGxvYWRDb25maWcgfSBmcm9tICdAbm9kZS1ub3ZlbC90YXNrL2xpYi9jb25maWcnO1xuaW1wb3J0IHsgSUNvbmZpZyB9IGZyb20gJ0Bub2RlLW5vdmVsL3Rhc2snO1xuaW1wb3J0IHsgZ2V0Tm92ZWxTdGF0Q2FjaGUgfSBmcm9tICcuLi9saWIvY2FjaGUvbm92ZWwtc3RhdCc7XG5pbXBvcnQgUHJvamVjdENvbmZpZyBmcm9tICcuLi9wcm9qZWN0LmNvbmZpZyc7XG5pbXBvcnQgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5pbXBvcnQgKiBhcyBGYXN0R2xvYiBmcm9tICdmYXN0LWdsb2InO1xuXG4vKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE4LzcvMjIvMDIyLlxuICovXG5cbmV4cG9ydCBjb25zdCBQUk9KRUNUX1JPT1QgPSBQcm9qZWN0Q29uZmlnLnByb2plY3Rfcm9vdDtcblxuZXhwb3J0IGxldCBNeUNvbmZpZyA9IGxvYWRNYWluQ29uZmlnKFBST0pFQ1RfUk9PVCk7XG5leHBvcnQgbGV0IENhY2hlQ29uZmlnID0gbG9hZENhY2hlQ29uZmlnKFBST0pFQ1RfUk9PVCk7XG5cbmV4cG9ydCBsZXQgR0lURUVfVE9LRU4gPSBwcm9jZXNzLmVudi5HSVRFRV9UT0tFTiB8fCAnJztcbmV4cG9ydCBjb25zdCBESVNUX05PVkVMID0gUHJvamVjdENvbmZpZy5ub3ZlbF9yb290O1xuXG5jb25zb2xlLnRpbWUoJ2J1Z2ZpeCcpO1xuXG5sZXQgbHM6IHN0cmluZ1tdID0gRmFzdEdsb2Iuc3luYyhbXG5cdCdkb2NzLyouanNvbicsXG5dLCB7XG5cdGN3ZDogcGF0aC5qb2luKFByb2plY3RDb25maWcuY2FjaGVfcm9vdCwgJ2ZpbGVzJyksXG5cdGFic29sdXRlOiB0cnVlLFxuXHRvbmx5RmlsZXM6IHRydWUsXG59KTtcblxuaWYgKGxzLmxlbmd0aClcbntcblx0bHMuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSlcblx0e1xuXHRcdGNvbnNvbGUubG9nKCdbZGVsZXRlXScsIGZpbGUpO1xuXHRcdGZzLnJlbW92ZVN5bmMoZmlsZSlcblx0fSlcbn1cblxue1xuXHRsZXQgbm93ID0gbW9tZW50KCk7XG5cdGxldCBub3dfdW5peCA9IG5vdy51bml4KCk7XG5cblx0Y29uc3Qgbm92ZWxTdGF0Q2FjaGUgPSBnZXROb3ZlbFN0YXRDYWNoZSgpO1xuXG5cdGNvbnN0IHRpbWVzdGFtcCA9IG5vdmVsU3RhdENhY2hlLnRpbWVzdGFtcDtcblxuXHRsZXQgX29rOiBib29sZWFuO1xuXG5cdE9iamVjdC5lbnRyaWVzKG5vdmVsU3RhdENhY2hlLmRhdGEuaGlzdG9yeSlcblx0XHQuZm9yRWFjaChmdW5jdGlvbiAoW3RpbWVzdGFtcCwgc3RhdF0pXG5cdFx0e1xuXHRcdFx0bGV0IG5fdGltZXN0YW1wID0gcGFyc2VJbnQodGltZXN0YW1wKTtcblxuXHRcdFx0aWYgKG5vd191bml4ID49IG5fdGltZXN0YW1wKVxuXHRcdFx0e1xuXHRcdFx0XHRsZXQgbXMgPSBtb21lbnQudW5peChuX3RpbWVzdGFtcCkudmFsdWVPZigpO1xuXG5cdFx0XHRcdGRlbGV0ZSBub3ZlbFN0YXRDYWNoZS5kYXRhLmhpc3RvcnlbdGltZXN0YW1wXTtcblx0XHRcdFx0bm92ZWxTdGF0Q2FjaGUuZGF0YS5oaXN0b3J5W21zXSA9IHN0YXQ7XG5cblx0XHRcdFx0X29rID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdH0pXG5cdDtcblxuXHRPYmplY3QuZW50cmllcyhub3ZlbFN0YXRDYWNoZS5kYXRhLm5vdmVscylcblx0XHQuZm9yRWFjaCgoW3BhdGhNYWluLCBkYXRhXSwgaSkgPT5cblx0XHR7XG5cdFx0XHRPYmplY3QuZW50cmllcyhub3ZlbFN0YXRDYWNoZS5kYXRhLm5vdmVsc1twYXRoTWFpbl0pXG5cdFx0XHRcdC5mb3JFYWNoKChbbm92ZWxJRCwgZGF0YV0pID0+XG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsZXQga3M6IChrZXlvZiB0eXBlb2YgZGF0YSlbXSA9IFtcblx0XHRcdFx0XHRcdCdpbml0X2RhdGUnLFxuXHRcdFx0XHRcdFx0J2VwdWJfZGF0ZScsXG5cdFx0XHRcdFx0XHQnc2VnbWVudF9kYXRlJyxcblx0XHRcdFx0XHRdO1xuXG5cdFx0XHRcdFx0a3MuZm9yRWFjaChrID0+IHtcblxuXHRcdFx0XHRcdFx0aWYgKGRhdGFba10gJiYgbm93X3VuaXggPj0gZGF0YVtrXSlcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0bGV0IG1zID0gbW9tZW50LnVuaXgoZGF0YVtrXSkudmFsdWVPZigpO1xuXG5cdFx0XHRcdFx0XHRcdGRhdGFba10gPSBtcztcblxuXHRcdFx0XHRcdFx0XHRfb2sgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pXG5cdFx0XHQ7XG5cdFx0fSlcblx0O1xuXG5cdGlmIChfb2spXG5cdHtcblx0XHRub3ZlbFN0YXRDYWNoZS5zYXZlKCk7XG5cdH1cbn1cblxuY29uc29sZS50aW1lRW5kKCdidWdmaXgnKTtcbiJdfQ==