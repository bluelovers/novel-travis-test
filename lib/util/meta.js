"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sort_1 = require("@node-novel/sort");
const fs = require("fs-extra");
const node_novel_info_1 = require("node-novel-info");
const log_1 = require("../log");
const path = require("path");
const FastGlob = require("fast-glob");
const project_config_1 = require("../../project.config");
const util_1 = require("@node-novel/cache-loader/lib/util");
const metaMap = new Map();
function get_idsSync(rootPath) {
    return FastGlob.sync([
        '*',
        '!docs',
        '!.*',
        '!*.raw',
        '!raw',
    ], {
        deep: 1,
        onlyDirectories: true,
        markDirectories: false,
        cwd: rootPath,
    });
}
exports.get_idsSync = get_idsSync;
function filterIDs(rootPath) {
    let memo = get_idsSync(rootPath)
        .sort(function (a, b) {
        if (a.replace(/_out$/, '') === b.replace(/_out$/, '')) {
            if (/_out$/.test(a)) {
                return 1;
            }
            else {
                return -1;
            }
        }
        return sort_1.naturalCompare(a, b);
    })
        .reduce(function (memo, pathMain) {
        let _m = pathMain.match(/^(.+?)(_out)?$/);
        let is_out = !!_m[2];
        let pathMain_base = _m[1];
        memo[pathMain_base] = memo[pathMain_base] || {};
        FastGlob.sync([
            '*/README.md',
        ], {
            cwd: path.join(rootPath, pathMain),
        })
            .sort(util_1.cacheSortCallback)
            .forEach(function (p) {
            let novelID = path.basename(path.dirname(p));
            memo[pathMain_base][novelID] = {
                pathMain,
                novelID,
            };
        });
        if (!Object.keys(memo[pathMain_base]).length) {
            delete memo[pathMain_base];
        }
        return memo;
    }, {});
    let list = [];
    Object.values(memo)
        .forEach(function (ls) {
        Object.values(ls)
            .forEach(function ({ pathMain, novelID, }) {
            list.push({
                pathMain,
                novelID,
            });
        });
    });
    return list;
}
exports.filterIDs = filterIDs;
function getMdconfMeta(pathMain, novelID, reload) {
    let basePath = path.join(project_config_1.default.novel_root, pathMain, novelID);
    return getMdconfMetaByPath(basePath, reload);
}
exports.getMdconfMeta = getMdconfMeta;
function getMdconfMetaByPath(basePath, reload) {
    if (!reload && metaMap.has(basePath)) {
        return metaMap.get(basePath);
    }
    let meta;
    try {
        let data = fs.readFileSync(path.join(basePath, 'README.md'));
        meta = node_novel_info_1.mdconf_parse(data, {
            throw: false,
        });
        meta = node_novel_info_1.chkInfo(meta);
    }
    catch (e) {
        log_1.default.error(e);
        meta = null;
    }
    metaMap.set(basePath, meta);
    return meta;
}
exports.getMdconfMetaByPath = getMdconfMetaByPath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1ldGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBa0Q7QUFDbEQsK0JBQStCO0FBQy9CLHFEQUFxRTtBQUNyRSxnQ0FBNkI7QUFDN0IsNkJBQThCO0FBQzlCLHNDQUF1QztBQUN2Qyx5REFBaUQ7QUFHakQsNERBQXFFO0FBRXJFLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxFQUF1QixDQUFDO0FBRS9DLFNBQWdCLFdBQVcsQ0FBQyxRQUFnQjtJQUUzQyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQVM7UUFDNUIsR0FBRztRQUNILE9BQU87UUFDUCxLQUFLO1FBQ0wsUUFBUTtRQUNSLE1BQU07S0FDTixFQUFFO1FBQ0YsSUFBSSxFQUFFLENBQUM7UUFDUCxlQUFlLEVBQUUsSUFBSTtRQUNyQixlQUFlLEVBQUUsS0FBSztRQUN0QixHQUFHLEVBQUUsUUFBUTtLQUNiLENBQUMsQ0FBQTtBQUNILENBQUM7QUFkRCxrQ0FjQztBQUVELFNBQWdCLFNBQVMsQ0FBQyxRQUFnQjtJQUV6QyxJQUFJLElBQUksR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO1NBQzlCLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1FBRW5CLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQ3JEO1lBQ0MsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNuQjtnQkFDQyxPQUFPLENBQUMsQ0FBQzthQUNUO2lCQUVEO2dCQUNDLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDVjtTQUNEO1FBRUQsT0FBTyxxQkFBYyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUM7U0FDRCxNQUFNLENBQUMsVUFBVSxJQUFJLEVBQUUsUUFBZ0I7UUFFdkMs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T0FBTyxJQUFJLENBQUM7QUFDYixDQUFDO0FBN0JELGtEQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5hdHVyYWxDb21wYXJlIH0gZnJvbSAnQG5vZGUtbm92ZWwvc29ydCc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBjaGtJbmZvLCBJTWRjb25mTWV0YSwgbWRjb25mX3BhcnNlIH0gZnJvbSAnbm9kZS1ub3ZlbC1pbmZvJztcbmltcG9ydCBjb25zb2xlIGZyb20gJy4uL2xvZyc7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCBGYXN0R2xvYiA9IHJlcXVpcmUoJ2Zhc3QtZ2xvYicpO1xuaW1wb3J0IFByb2plY3RDb25maWcgZnJvbSAnLi4vLi4vcHJvamVjdC5jb25maWcnO1xuaW1wb3J0IHsgZ2V0X2lkcyB9IGZyb20gJ0Bub2RlLW5vdmVsL3RvYyc7XG5pbXBvcnQgeyB0b2NTb3J0Q2FsbGJhY2sgfSBmcm9tICdAbm9kZS1ub3ZlbC90b2MvbGliL3V0aWwnO1xuaW1wb3J0IHsgY2FjaGVTb3J0Q2FsbGJhY2sgfSBmcm9tICdAbm9kZS1ub3ZlbC9jYWNoZS1sb2FkZXIvbGliL3V0aWwnXG5cbmNvbnN0IG1ldGFNYXAgPSBuZXcgTWFwPHN0cmluZywgSU1kY29uZk1ldGE+KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRfaWRzU3luYyhyb290UGF0aDogc3RyaW5nKVxue1xuXHRyZXR1cm4gRmFzdEdsb2Iuc3luYzxzdHJpbmc+KFtcblx0XHQnKicsXG5cdFx0JyFkb2NzJyxcblx0XHQnIS4qJyxcblx0XHQnISoucmF3Jyxcblx0XHQnIXJhdycsXG5cdF0sIHtcblx0XHRkZWVwOiAxLFxuXHRcdG9ubHlEaXJlY3RvcmllczogdHJ1ZSxcblx0XHRtYXJrRGlyZWN0b3JpZXM6IGZhbHNlLFxuXHRcdGN3ZDogcm9vdFBhdGgsXG5cdH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJJRHMocm9vdFBhdGg6IHN0cmluZylcbntcblx0bGV0IG1lbW8gPSBnZXRfaWRzU3luYyhyb290UGF0aClcblx0XHQuc29ydChmdW5jdGlvbiAoYSwgYilcblx0XHR7XG5cdFx0XHRpZiAoYS5yZXBsYWNlKC9fb3V0JC8sICcnKSA9PT0gYi5yZXBsYWNlKC9fb3V0JC8sICcnKSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKC9fb3V0JC8udGVzdChhKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmF0dXJhbENvbXBhcmUoYSwgYik7XG5cdFx0fSlcblx0XHQucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBwYXRoTWFpbjogc3RyaW5nKVxuXHRcdHtcblx0XHRcdGxldCBfbSA9IHBhdGhNYWluLm1hdGNoKC9eKC4rPykoX291dCk/JC8pO1xuXG5cdFx0XHRsZXQgaXNfb3V0ID0gISFfbVsyXTtcblx0XHRcdGxldCBwYXRoTWFpbl9iYXNlID0gX21bMV07XG5cblx0XHRcdG1lbW9bcGF0aE1haW5fYmFzZV0gPSBtZW1vW3BhdGhNYWluX2Jhc2VdIHx8IHt9O1xuXG5cdFx0XHRGYXN0R2xvYi5zeW5jPHN0cmluZz4oW1xuXHRcdFx0XHRcdCcqL1JFQURNRS5tZCcsXG5cdFx0XHRcdF0sIHtcblx0XHRcdFx0XHRjd2Q6IHBhdGguam9pbihyb290UGF0aCwgcGF0aE1haW4pLFxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuc29ydChjYWNoZVNvcnRDYWxsYmFjaylcblx0XHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKHApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsZXQgbm92ZWxJRCA9IHBhdGguYmFzZW5hbWUocGF0aC5kaXJuYW1lKHApKTtcblxuXHRcdFx0XHRcdG1lbW9bcGF0aE1haW5fYmFzZV1bbm92ZWxJRF0gPSB7XG5cdFx0XHRcdFx0XHRwYXRoTWFpbixcblx0XHRcdFx0XHRcdG5vdmVsSUQsXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSlcblx0XHRcdDtcblxuXHRcdFx0aWYgKCFPYmplY3Qua2V5cyhtZW1vW3BhdGhNYWluX2Jhc2VdKS5sZW5ndGgpXG5cdFx0XHR7XG5cdFx0XHRcdGRlbGV0ZSBtZW1vW3BhdGhNYWluX2Jhc2VdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWVtbztcblx0XHR9LCB7fSBhcyB7XG5cdFx0XHRbcGF0aE1haW5fYmFzZTogc3RyaW5nXToge1xuXHRcdFx0XHRbbm92ZWxJRDogc3RyaW5nXToge1xuXHRcdFx0XHRcdHBhdGhNYWluOiBzdHJpbmcsXG5cdFx0XHRcdFx0bm92ZWxJRDogc3RyaW5nLFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSlcblx0O1xuXG5cdGxldCBsaXN0OiB7IHBhdGhNYWluOiBzdHJpbmcsIG5vdmVsSUQ6IHN0cmluZyB9W10gPSBbXTtcblxuXHRPYmplY3QudmFsdWVzKG1lbW8pXG5cdFx0LmZvckVhY2goZnVuY3Rpb24gKGxzKVxuXHRcdHtcblx0XHRcdE9iamVjdC52YWx1ZXMobHMpXG5cdFx0XHRcdC5mb3JFYWNoKGZ1bmN0aW9uICh7XG5cdFx0XHRcdFx0cGF0aE1haW4sXG5cdFx0XHRcdFx0bm92ZWxJRCxcblx0XHRcdFx0fSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxpc3QucHVzaCh7XG5cdFx0XHRcdFx0XHRwYXRoTWFpbixcblx0XHRcdFx0XHRcdG5vdmVsSUQsXG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fSlcblx0XHRcdDtcblx0XHR9KVxuXHQ7XG5cblx0cmV0dXJuIGxpc3Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1kY29uZk1ldGEocGF0aE1haW46IHN0cmluZywgbm92ZWxJRDogc3RyaW5nLCByZWxvYWQ/OiBib29sZWFuKVxue1xuXHRsZXQgYmFzZVBhdGggPSBwYXRoLmpvaW4oUHJvamVjdENvbmZpZy5ub3ZlbF9yb290LCBwYXRoTWFpbiwgbm92ZWxJRCk7XG5cblx0cmV0dXJuIGdldE1kY29uZk1ldGFCeVBhdGgoYmFzZVBhdGgsIHJlbG9hZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZGNvbmZNZXRhQnlQYXRoKGJhc2VQYXRoOiBzdHJpbmcsIHJlbG9hZD86IGJvb2xlYW4pXG57XG5cblx0aWYgKCFyZWxvYWQgJiYgbWV0YU1hcC5oYXMoYmFzZVBhdGgpKVxuXHR7XG5cdFx0cmV0dXJuIG1ldGFNYXAuZ2V0KGJhc2VQYXRoKVxuXHR9XG5cblx0bGV0IG1ldGE6IElNZGNvbmZNZXRhO1xuXG5cdHRyeVxuXHR7XG5cdFx0bGV0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKGJhc2VQYXRoLCAnUkVBRE1FLm1kJykpO1xuXG5cdFx0bWV0YSA9IG1kY29uZl9wYXJzZShkYXRhLCB7XG5cdFx0XHR0aHJvdzogZmFsc2UsXG5cdFx0fSk7XG5cblx0XHRtZXRhID0gY2hrSW5mbyhtZXRhKTtcblx0fVxuXHRjYXRjaCAoZSlcblx0e1xuXHRcdGNvbnNvbGUuZXJyb3IoZSk7XG5cdFx0bWV0YSA9IG51bGw7XG5cdH1cblxuXHRtZXRhTWFwLnNldChiYXNlUGF0aCwgbWV0YSk7XG5cblx0cmV0dXJuIG1ldGE7XG59XG4iXX0=