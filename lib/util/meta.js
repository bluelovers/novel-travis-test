"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sort_1 = require("@node-novel/sort");
const fs = require("fs-extra");
const node_novel_info_1 = require("node-novel-info");
const log_1 = require("../log");
const path = require("path");
const FastGlob = require("fast-glob");
const project_config_1 = require("../../project.config");
const util_1 = require("@node-novel/cache-loader/lib/util");
const metaMap = new Map();
function get_idsSync(rootPath) {
    return FastGlob.sync([
        '*',
        '!docs',
        '!.*',
        '!*.raw',
        '!raw',
    ], {
        deep: 1,
        onlyDirectories: true,
        markDirectories: false,
        cwd: rootPath,
    });
}
exports.get_idsSync = get_idsSync;
function filterIDs(rootPath) {
    let memo = get_idsSync(rootPath)
        .sort(function (a, b) {
        if (a.replace(/_out$/, '') === b.replace(/_out$/, '')) {
            if (/_out$/.test(a)) {
                return 1;
            }
            else {
                return -1;
            }
        }
        return sort_1.naturalCompare(a, b);
    })
        .reduce(function (memo, pathMain) {
        let _m = pathMain.match(/^(.+?)(_out)?$/);
        let is_out = !!_m[2];
        let pathMain_base = _m[1];
        memo[pathMain_base] = memo[pathMain_base] || {};
        FastGlob.sync([
            '*/README.md',
        ], {
            cwd: path.join(rootPath, pathMain),
        })
            .sort(util_1.cacheSortCallback)
            .forEach(function (p) {
            let novelID = path.basename(path.dirname(p));
            memo[pathMain_base][novelID] = {
                pathMain,
                novelID,
            };
        });
        if (!Object.keys(memo[pathMain_base]).length) {
            delete memo[pathMain_base];
        }
        return memo;
    }, {});
    let list = [];
    Object.values(memo)
        .forEach(function (ls) {
        Object.values(ls)
            .forEach(function ({ pathMain, novelID, }) {
            list.push({
                pathMain,
                novelID,
            });
        });
    });
    return list;
}
exports.filterIDs = filterIDs;
function getMdconfMeta(pathMain, novelID, reload) {
    let basePath = path.join(project_config_1.default.novel_root, pathMain, novelID);
    return getMdconfMetaByPath(basePath, reload);
}
exports.getMdconfMeta = getMdconfMeta;
function getMdconfMetaByPath(basePath, reload) {
    if (!reload && metaMap.has(basePath)) {
        return metaMap.get(basePath);
    }
    let meta;
    try {
        let data = fs.readFileSync(path.join(basePath, 'README.md'));
        meta = node_novel_info_1.mdconf_parse(data, {
            throw: false,
        });
        meta = node_novel_info_1.chkInfo(meta);
    }
    catch (e) {
        log_1.default.error(e);
        meta = null;
    }
    metaMap.set(basePath, meta);
    return meta;
}
exports.getMdconfMetaByPath = getMdconfMetaByPath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1ldGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBa0Q7QUFDbEQsK0JBQStCO0FBQy9CLHFEQUFxRTtBQUNyRSxnQ0FBNkI7QUFDN0IsNkJBQThCO0FBQzlCLHNDQUF1QztBQUN2Qyx5REFBaUQ7QUFHakQsNERBQXFFO0FBRXJFLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxFQUF1QixDQUFDO0FBRS9DLFNBQWdCLFdBQVcsQ0FBQyxRQUFnQjtJQUUzQyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDcEIsR0FBRztRQUNILE9BQU87UUFDUCxLQUFLO1FBQ0wsUUFBUTtRQUNSLE1BQU07S0FDTixFQUFFO1FBQ0YsSUFBSSxFQUFFLENBQUM7UUFDUCxlQUFlLEVBQUUsSUFBSTtRQUNyQixlQUFlLEVBQUUsS0FBSztRQUN0QixHQUFHLEVBQUUsUUFBUTtLQUNiLENBQUMsQ0FBQTtBQUNILENBQUM7QUFkRCxrQ0FjQztBQUVELFNBQWdCLFNBQVMsQ0FBQyxRQUFnQjtJQUV6QyxJQUFJLElBQUksR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO1NBQzlCLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1FBRW5CLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQ3JEO1lBQ0MsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNuQjtnQkFDQyxPQUFPLENBQUMsQ0FBQzthQUNUO2lCQUVEO2dCQUNDLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDVjtTQUNEO1FBRUQsT0FBTyxxQkFBYyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUM7U0FDRCxNQUFNLENBQUMsVUFBVSxJQUFJLEVBQUUsUUFBZ0I7UUFFdkMs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QUFPLElBQUksQ0FBQztBQUNiLENBQUM7QUE3QkQsa0RBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmF0dXJhbENvbXBhcmUgfSBmcm9tICdAbm9kZS1ub3ZlbC9zb3J0JztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB7IGNoa0luZm8sIElNZGNvbmZNZXRhLCBtZGNvbmZfcGFyc2UgfSBmcm9tICdub2RlLW5vdmVsLWluZm8nO1xuaW1wb3J0IGNvbnNvbGUgZnJvbSAnLi4vbG9nJztcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IEZhc3RHbG9iID0gcmVxdWlyZSgnZmFzdC1nbG9iJyk7XG5pbXBvcnQgUHJvamVjdENvbmZpZyBmcm9tICcuLi8uLi9wcm9qZWN0LmNvbmZpZyc7XG5pbXBvcnQgeyBnZXRfaWRzIH0gZnJvbSAnQG5vZGUtbm92ZWwvdG9jJztcbmltcG9ydCB7IHRvY1NvcnRDYWxsYmFjayB9IGZyb20gJ0Bub2RlLW5vdmVsL3RvYy9saWIvdXRpbCc7XG5pbXBvcnQgeyBjYWNoZVNvcnRDYWxsYmFjayB9IGZyb20gJ0Bub2RlLW5vdmVsL2NhY2hlLWxvYWRlci9saWIvdXRpbCdcblxuY29uc3QgbWV0YU1hcCA9IG5ldyBNYXA8c3RyaW5nLCBJTWRjb25mTWV0YT4oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldF9pZHNTeW5jKHJvb3RQYXRoOiBzdHJpbmcpOiBzdHJpbmdbXVxue1xuXHRyZXR1cm4gRmFzdEdsb2Iuc3luYyhbXG5cdFx0JyonLFxuXHRcdCchZG9jcycsXG5cdFx0JyEuKicsXG5cdFx0JyEqLnJhdycsXG5cdFx0JyFyYXcnLFxuXHRdLCB7XG5cdFx0ZGVlcDogMSxcblx0XHRvbmx5RGlyZWN0b3JpZXM6IHRydWUsXG5cdFx0bWFya0RpcmVjdG9yaWVzOiBmYWxzZSxcblx0XHRjd2Q6IHJvb3RQYXRoLFxuXHR9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVySURzKHJvb3RQYXRoOiBzdHJpbmcpXG57XG5cdGxldCBtZW1vID0gZ2V0X2lkc1N5bmMocm9vdFBhdGgpXG5cdFx0LnNvcnQoZnVuY3Rpb24gKGEsIGIpXG5cdFx0e1xuXHRcdFx0aWYgKGEucmVwbGFjZSgvX291dCQvLCAnJykgPT09IGIucmVwbGFjZSgvX291dCQvLCAnJykpXG5cdFx0XHR7XG5cdFx0XHRcdGlmICgvX291dCQvLnRlc3QoYSkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG5hdHVyYWxDb21wYXJlKGEsIGIpO1xuXHRcdH0pXG5cdFx0LnJlZHVjZShmdW5jdGlvbiAobWVtbywgcGF0aE1haW46IHN0cmluZylcblx0XHR7XG5cdFx0XHRsZXQgX20gPSBwYXRoTWFpbi5tYXRjaCgvXiguKz8pKF9vdXQpPyQvKTtcblxuXHRcdFx0bGV0IGlzX291dCA9ICEhX21bMl07XG5cdFx0XHRsZXQgcGF0aE1haW5fYmFzZSA9IF9tWzFdO1xuXG5cdFx0XHRtZW1vW3BhdGhNYWluX2Jhc2VdID0gbWVtb1twYXRoTWFpbl9iYXNlXSB8fCB7fTtcblxuXHRcdFx0RmFzdEdsb2Iuc3luYyhbXG5cdFx0XHRcdFx0JyovUkVBRE1FLm1kJyxcblx0XHRcdFx0XSwge1xuXHRcdFx0XHRcdGN3ZDogcGF0aC5qb2luKHJvb3RQYXRoLCBwYXRoTWFpbiksXG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5zb3J0KGNhY2hlU29ydENhbGxiYWNrKVxuXHRcdFx0XHQuZm9yRWFjaChmdW5jdGlvbiAocClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxldCBub3ZlbElEID0gcGF0aC5iYXNlbmFtZShwYXRoLmRpcm5hbWUocCkpO1xuXG5cdFx0XHRcdFx0bWVtb1twYXRoTWFpbl9iYXNlXVtub3ZlbElEXSA9IHtcblx0XHRcdFx0XHRcdHBhdGhNYWluLFxuXHRcdFx0XHRcdFx0bm92ZWxJRCxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KVxuXHRcdFx0O1xuXG5cdFx0XHRpZiAoIU9iamVjdC5rZXlzKG1lbW9bcGF0aE1haW5fYmFzZV0pLmxlbmd0aClcblx0XHRcdHtcblx0XHRcdFx0ZGVsZXRlIG1lbW9bcGF0aE1haW5fYmFzZV07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtZW1vO1xuXHRcdH0sIHt9IGFzIHtcblx0XHRcdFtwYXRoTWFpbl9iYXNlOiBzdHJpbmddOiB7XG5cdFx0XHRcdFtub3ZlbElEOiBzdHJpbmddOiB7XG5cdFx0XHRcdFx0cGF0aE1haW46IHN0cmluZyxcblx0XHRcdFx0XHRub3ZlbElEOiBzdHJpbmcsXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KVxuXHQ7XG5cblx0bGV0IGxpc3Q6IHsgcGF0aE1haW46IHN0cmluZywgbm92ZWxJRDogc3RyaW5nIH1bXSA9IFtdO1xuXG5cdE9iamVjdC52YWx1ZXMobWVtbylcblx0XHQuZm9yRWFjaChmdW5jdGlvbiAobHMpXG5cdFx0e1xuXHRcdFx0T2JqZWN0LnZhbHVlcyhscylcblx0XHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKHtcblx0XHRcdFx0XHRwYXRoTWFpbixcblx0XHRcdFx0XHRub3ZlbElELFxuXHRcdFx0XHR9KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGlzdC5wdXNoKHtcblx0XHRcdFx0XHRcdHBhdGhNYWluLFxuXHRcdFx0XHRcdFx0bm92ZWxJRCxcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHR9KVxuXHRcdFx0O1xuXHRcdH0pXG5cdDtcblxuXHRyZXR1cm4gbGlzdFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWRjb25mTWV0YShwYXRoTWFpbjogc3RyaW5nLCBub3ZlbElEOiBzdHJpbmcsIHJlbG9hZD86IGJvb2xlYW4pXG57XG5cdGxldCBiYXNlUGF0aCA9IHBhdGguam9pbihQcm9qZWN0Q29uZmlnLm5vdmVsX3Jvb3QsIHBhdGhNYWluLCBub3ZlbElEKTtcblxuXHRyZXR1cm4gZ2V0TWRjb25mTWV0YUJ5UGF0aChiYXNlUGF0aCwgcmVsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1kY29uZk1ldGFCeVBhdGgoYmFzZVBhdGg6IHN0cmluZywgcmVsb2FkPzogYm9vbGVhbilcbntcblxuXHRpZiAoIXJlbG9hZCAmJiBtZXRhTWFwLmhhcyhiYXNlUGF0aCkpXG5cdHtcblx0XHRyZXR1cm4gbWV0YU1hcC5nZXQoYmFzZVBhdGgpXG5cdH1cblxuXHRsZXQgbWV0YTogSU1kY29uZk1ldGE7XG5cblx0dHJ5XG5cdHtcblx0XHRsZXQgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oYmFzZVBhdGgsICdSRUFETUUubWQnKSk7XG5cblx0XHRtZXRhID0gbWRjb25mX3BhcnNlKGRhdGEsIHtcblx0XHRcdHRocm93OiBmYWxzZSxcblx0XHR9KTtcblxuXHRcdG1ldGEgPSBjaGtJbmZvKG1ldGEpO1xuXHR9XG5cdGNhdGNoIChlKVxuXHR7XG5cdFx0Y29uc29sZS5lcnJvcihlKTtcblx0XHRtZXRhID0gbnVsbDtcblx0fVxuXG5cdG1ldGFNYXAuc2V0KGJhc2VQYXRoLCBtZXRhKTtcblxuXHRyZXR1cm4gbWV0YTtcbn1cbiJdfQ==