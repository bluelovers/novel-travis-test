"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sort_1 = require("@node-novel/sort");
const fs = require("fs-extra");
const node_novel_info_1 = require("node-novel-info");
const log_1 = require("../log");
const path = require("path");
const FastGlob = require("fast-glob");
const project_config_1 = require("../../project.config");
const metaMap = new Map();
function get_idsSync(rootPath) {
    return FastGlob.sync([
        '*',
        '!docs',
        '!.*',
        '!*.raw',
        '!raw',
    ], {
        deep: 1,
        onlyDirectories: true,
        markDirectories: false,
        cwd: rootPath,
    });
}
exports.get_idsSync = get_idsSync;
function filterIDs(rootPath) {
    let memo = get_idsSync(rootPath)
        .sort(function (a, b) {
        if (a.replace(/_out$/, '') === b.replace(/_out$/, '')) {
            if (/_out$/.test(a)) {
                return 1;
            }
            else {
                return -1;
            }
        }
        return sort_1.naturalCompare(a, b);
    })
        .reduce(function (memo, pathMain) {
        let _m = pathMain.match(/^(.+?)(_out)?$/);
        let is_out = !!_m[2];
        let pathMain_base = _m[1];
        memo[pathMain_base] = memo[pathMain] || {};
        FastGlob.sync([
            '*/README.md',
        ], {
            cwd: path.join(rootPath, pathMain),
        })
            .forEach(function (p) {
            let novelID = path.basename(path.dirname(p));
            memo[pathMain_base][novelID] = {
                pathMain,
                novelID,
            };
        });
        return memo;
    }, {});
    let list = [];
    Object.values(memo)
        .forEach(function (ls) {
        Object.values(ls)
            .forEach(function ({ pathMain, novelID, }) {
            list.push({
                pathMain,
                novelID,
            });
        });
    });
    return list;
}
exports.filterIDs = filterIDs;
function getMdconfMeta(pathMain, novelID, reload) {
    let basePath = path.join(project_config_1.default.novel_root, pathMain, novelID);
    return getMdconfMetaByPath(basePath, reload);
}
exports.getMdconfMeta = getMdconfMeta;
function getMdconfMetaByPath(basePath, reload) {
    if (!reload && metaMap.has(basePath)) {
        return metaMap.get(basePath);
    }
    let meta;
    try {
        let data = fs.readFileSync(path.join(basePath, 'README.md'));
        meta = node_novel_info_1.mdconf_parse(data, {
            throw: false,
        });
        meta = node_novel_info_1.chkInfo(meta);
    }
    catch (e) {
        log_1.default.error(e);
        meta = null;
    }
    metaMap.set(basePath, meta);
    return meta;
}
exports.getMdconfMetaByPath = getMdconfMetaByPath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1ldGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBa0Q7QUFDbEQsK0JBQStCO0FBQy9CLHFEQUFxRTtBQUNyRSxnQ0FBNkI7QUFDN0IsNkJBQThCO0FBQzlCLHNDQUF1QztBQUN2Qyx5REFBaUQ7QUFHakQsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQXVCLENBQUM7QUFFL0MsU0FBZ0IsV0FBVyxDQUFDLFFBQWdCO0lBRTNDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBUztRQUM1QixHQUFHO1FBQ0gsT0FBTztRQUNQLEtBQUs7UUFDTCxRQUFRO1FBQ1IsTUFBTTtLQUNOLEVBQUU7UUFDRixJQUFJLEVBQUUsQ0FBQztRQUNQLGVBQWUsRUFBRSxJQUFJO1FBQ3JCLGVBQWUsRUFBRSxLQUFLO1FBQ3RCLEdBQUcsRUFBRSxRQUFRO0tBQ2IsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQWRELGtDQWNDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLFFBQWdCO0lBRXpDLElBQUksSUFBSSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUM7U0FDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFFbkIsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFDckQ7WUFDQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ25CO2dCQUNDLE9BQU8sQ0FBQyxDQUFDO2FBQ1Q7aUJBRUQ7Z0JBQ0MsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUNWO1NBQ0Q7UUFFRCxPQUFPLHFCQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQztTQUNELE1BQU0sQ0FBQyxVQUFVLElBQUksRUFBRSxRQUFnQjtRQUV2QyxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFMUMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixJQUFJLGFBQWEsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFMUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFM0MsUUFBUSxDQUFDLElBQUksQ0FBUztZQUNwQixhQUFhO1NBQ2IsRUFBRTtZQUNGLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7U0FDbEMsQ0FBQzthQUNELE9BQU8sQ0FBQyxVQUFVLENBQUM7WUFFbkIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFN0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHO2dCQUM5QixRQUFRO2dCQUNSLE9BQU87YUFDUCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQ0Y7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUMsRUFBRSxFQU9GLENBQUMsQ0FDRjtJQUVELElBQUksSUFBSSxHQUE0QyxFQUFFLENBQUM7SUFFdkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDakIsT0FBTyxDQUFDLFVBQVUsRUFBRTtRQUVwQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQzthQUNmLE9BQU8sQ0FBQyxVQUFVLEVBQ2xCLFFBQVEsRUFDUixPQUFPLEdBQ1A7WUFFQSxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUNULFFBQVE7Z0JBQ1IsT0FBTzthQUNQLENBQUMsQ0FBQTtRQUNILENBQUMsQ0FBQyxDQUNGO0lBQ0YsQ0FBQyxDQUFDLENBQ0Y7SUFFRCxPQUFPLElBQUksQ0FBQTtBQUNaLENBQUM7QUE1RUQsOEJBNEVDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLFFBQWdCLEVBQUUsT0FBZSxFQUFFLE1BQWdCO0lBRWhGLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQWEsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRXRFLE9BQU8sbUJBQW1CLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFMRCxzQ0FLQztBQUVELFNBQWdCLG1CQUFtQixDQUFDLFFBQWdCLEVBQUUsTUFBZ0I7SUFHckUsSUFBSSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUNwQztRQUNDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtLQUM1QjtJQUVELElBQUksSUFBaUIsQ0FBQztJQUV0QixJQUNBO1FBQ0MsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBRTdELElBQUksR0FBRyw4QkFBWSxDQUFDLElBQUksRUFBRTtZQUN6QixLQUFLLEVBQUUsS0FBSztTQUNaLENBQUMsQ0FBQztRQUVILElBQUksR0FBRyx5QkFBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3JCO0lBQ0QsT0FBTyxDQUFDLEVBQ1I7UUFDQyxhQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLElBQUksR0FBRyxJQUFJLENBQUM7S0FDWjtJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRTVCLE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQztBQTdCRCxrREE2QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuYXR1cmFsQ29tcGFyZSB9IGZyb20gJ0Bub2RlLW5vdmVsL3NvcnQnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgY2hrSW5mbywgSU1kY29uZk1ldGEsIG1kY29uZl9wYXJzZSB9IGZyb20gJ25vZGUtbm92ZWwtaW5mbyc7XG5pbXBvcnQgY29uc29sZSBmcm9tICcuLi9sb2cnO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgRmFzdEdsb2IgPSByZXF1aXJlKCdmYXN0LWdsb2InKTtcbmltcG9ydCBQcm9qZWN0Q29uZmlnIGZyb20gJy4uLy4uL3Byb2plY3QuY29uZmlnJztcbmltcG9ydCB7IGdldF9pZHMgfSBmcm9tICdAbm9kZS1ub3ZlbC90b2MnO1xuXG5jb25zdCBtZXRhTWFwID0gbmV3IE1hcDxzdHJpbmcsIElNZGNvbmZNZXRhPigpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0X2lkc1N5bmMocm9vdFBhdGg6IHN0cmluZylcbntcblx0cmV0dXJuIEZhc3RHbG9iLnN5bmM8c3RyaW5nPihbXG5cdFx0JyonLFxuXHRcdCchZG9jcycsXG5cdFx0JyEuKicsXG5cdFx0JyEqLnJhdycsXG5cdFx0JyFyYXcnLFxuXHRdLCB7XG5cdFx0ZGVlcDogMSxcblx0XHRvbmx5RGlyZWN0b3JpZXM6IHRydWUsXG5cdFx0bWFya0RpcmVjdG9yaWVzOiBmYWxzZSxcblx0XHRjd2Q6IHJvb3RQYXRoLFxuXHR9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVySURzKHJvb3RQYXRoOiBzdHJpbmcpXG57XG5cdGxldCBtZW1vID0gZ2V0X2lkc1N5bmMocm9vdFBhdGgpXG5cdFx0LnNvcnQoZnVuY3Rpb24gKGEsIGIpXG5cdFx0e1xuXHRcdFx0aWYgKGEucmVwbGFjZSgvX291dCQvLCAnJykgPT09IGIucmVwbGFjZSgvX291dCQvLCAnJykpXG5cdFx0XHR7XG5cdFx0XHRcdGlmICgvX291dCQvLnRlc3QoYSkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG5hdHVyYWxDb21wYXJlKGEsIGIpO1xuXHRcdH0pXG5cdFx0LnJlZHVjZShmdW5jdGlvbiAobWVtbywgcGF0aE1haW46IHN0cmluZylcblx0XHR7XG5cdFx0XHRsZXQgX20gPSBwYXRoTWFpbi5tYXRjaCgvXiguKz8pKF9vdXQpPyQvKTtcblxuXHRcdFx0bGV0IGlzX291dCA9ICEhX21bMl07XG5cdFx0XHRsZXQgcGF0aE1haW5fYmFzZSA9IF9tWzFdO1xuXG5cdFx0XHRtZW1vW3BhdGhNYWluX2Jhc2VdID0gbWVtb1twYXRoTWFpbl0gfHwge307XG5cblx0XHRcdEZhc3RHbG9iLnN5bmM8c3RyaW5nPihbXG5cdFx0XHRcdFx0JyovUkVBRE1FLm1kJyxcblx0XHRcdFx0XSwge1xuXHRcdFx0XHRcdGN3ZDogcGF0aC5qb2luKHJvb3RQYXRoLCBwYXRoTWFpbiksXG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5mb3JFYWNoKGZ1bmN0aW9uIChwKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGV0IG5vdmVsSUQgPSBwYXRoLmJhc2VuYW1lKHBhdGguZGlybmFtZShwKSk7XG5cblx0XHRcdFx0XHRtZW1vW3BhdGhNYWluX2Jhc2VdW25vdmVsSURdID0ge1xuXHRcdFx0XHRcdFx0cGF0aE1haW4sXG5cdFx0XHRcdFx0XHRub3ZlbElELFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0pXG5cdFx0XHQ7XG5cblx0XHRcdHJldHVybiBtZW1vO1xuXHRcdH0sIHt9IGFzIHtcblx0XHRcdFtwYXRoTWFpbl9iYXNlOiBzdHJpbmddOiB7XG5cdFx0XHRcdFtub3ZlbElEOiBzdHJpbmddOiB7XG5cdFx0XHRcdFx0cGF0aE1haW46IHN0cmluZyxcblx0XHRcdFx0XHRub3ZlbElEOiBzdHJpbmcsXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KVxuXHQ7XG5cblx0bGV0IGxpc3Q6IHsgcGF0aE1haW46IHN0cmluZywgbm92ZWxJRDogc3RyaW5nIH1bXSA9IFtdO1xuXG5cdE9iamVjdC52YWx1ZXMobWVtbylcblx0XHQuZm9yRWFjaChmdW5jdGlvbiAobHMpXG5cdFx0e1xuXHRcdFx0T2JqZWN0LnZhbHVlcyhscylcblx0XHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKHtcblx0XHRcdFx0XHRwYXRoTWFpbixcblx0XHRcdFx0XHRub3ZlbElELFxuXHRcdFx0XHR9KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGlzdC5wdXNoKHtcblx0XHRcdFx0XHRcdHBhdGhNYWluLFxuXHRcdFx0XHRcdFx0bm92ZWxJRCxcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHR9KVxuXHRcdFx0O1xuXHRcdH0pXG5cdDtcblxuXHRyZXR1cm4gbGlzdFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWRjb25mTWV0YShwYXRoTWFpbjogc3RyaW5nLCBub3ZlbElEOiBzdHJpbmcsIHJlbG9hZD86IGJvb2xlYW4pXG57XG5cdGxldCBiYXNlUGF0aCA9IHBhdGguam9pbihQcm9qZWN0Q29uZmlnLm5vdmVsX3Jvb3QsIHBhdGhNYWluLCBub3ZlbElEKTtcblxuXHRyZXR1cm4gZ2V0TWRjb25mTWV0YUJ5UGF0aChiYXNlUGF0aCwgcmVsb2FkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1kY29uZk1ldGFCeVBhdGgoYmFzZVBhdGg6IHN0cmluZywgcmVsb2FkPzogYm9vbGVhbilcbntcblxuXHRpZiAoIXJlbG9hZCAmJiBtZXRhTWFwLmhhcyhiYXNlUGF0aCkpXG5cdHtcblx0XHRyZXR1cm4gbWV0YU1hcC5nZXQoYmFzZVBhdGgpXG5cdH1cblxuXHRsZXQgbWV0YTogSU1kY29uZk1ldGE7XG5cblx0dHJ5XG5cdHtcblx0XHRsZXQgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oYmFzZVBhdGgsICdSRUFETUUubWQnKSk7XG5cblx0XHRtZXRhID0gbWRjb25mX3BhcnNlKGRhdGEsIHtcblx0XHRcdHRocm93OiBmYWxzZSxcblx0XHR9KTtcblxuXHRcdG1ldGEgPSBjaGtJbmZvKG1ldGEpO1xuXHR9XG5cdGNhdGNoIChlKVxuXHR7XG5cdFx0Y29uc29sZS5lcnJvcihlKTtcblx0XHRtZXRhID0gbnVsbDtcblx0fVxuXG5cdG1ldGFNYXAuc2V0KGJhc2VQYXRoLCBtZXRhKTtcblxuXHRyZXR1cm4gbWV0YTtcbn1cbiJdfQ==