"use strict";
/**
 * Created by user on 2018/12/17/017.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("@node-novel/toc/lib/util");
const project_config_1 = require("../../project.config");
const path = require("upath2");
const fs = require("fs-extra");
const moment = require("moment");
const array_hyper_unique_1 = require("array-hyper-unique");
const sortObject = require("sort-object-keys2");
let opened;
const todayMoment = createMoment().startOf('day');
class NovelStatCache {
    /**
     * @deprecated
     */
    constructor(options) {
        this.file = path.join(project_config_1.default.cache_root, 'novel-stat.json');
        this.file_git = path.join(project_config_1.default.novel_root, 'novel-stat.json');
        this.data = null;
        this.inited = false;
        this.options = options || {};
        this.open();
    }
    open() {
        if (!this.inited) {
            this.inited = true;
            if (fs.pathExistsSync(this.file)) {
                this.data = fs.readJSONSync(this.file);
            }
            else if (fs.pathExistsSync(this.file_git)) {
                this.data = fs.readJSONSync(this.file_git);
            }
            // @ts-ignore
            this.data = this.data || {};
            this.data.history = this.data.history || {};
            this.data.novels = this.data.novels || {};
            this.data.mdconf = this.data.mdconf || {};
        }
        return this;
    }
    pathMain(pathMain) {
        return this.data.novels[pathMain] = this.data.novels[pathMain] || {};
    }
    novel(pathMain, novelID) {
        this.pathMain(pathMain);
        this.data.novels[pathMain][novelID] = this.data.novels[pathMain][novelID] || {};
        return this.data.novels[pathMain][novelID];
    }
    mdconf_get(pathMain, novelID) {
        this.data.mdconf[pathMain] = this.data.mdconf[pathMain] || {};
        return this.data.mdconf[pathMain][novelID];
    }
    mdconf_set(pathMain, novelID, meta) {
        this.data.mdconf[pathMain] = this.data.mdconf[pathMain] || {};
        this.data.mdconf[pathMain][novelID] = meta;
        return this;
    }
    /**
     * @deprecated
     */
    _beforeSave(bool) {
        let timestamp = this.timestamp;
        Object.entries(this.data.novels)
            .forEach(([pathMain, data], i) => {
            Object.entries(this.data.novels[pathMain])
                .forEach(([novelID, data]) => {
                let _a = [
                    data.init_date,
                    data.epub_date,
                    data.segment_date,
                    data.update_date,
                ]
                    .filter(v => v && v > 0);
                if (!_a.length) {
                    data.init_date = timestamp;
                }
                else {
                    data.init_date = _a
                        .reduce((a, b) => {
                        return Math.min(a, b);
                    })
                        || timestamp;
                }
            });
        });
        if (timestamp in this.data.history) {
            let _list = new Set();
            let today = this.data.history[timestamp];
            if (today.epub) {
                array_hyper_unique_1.array_unique(today.epub, {
                    overwrite: true,
                });
                today.epub.sort(function (a, b) {
                    return util_1.tocSortCallback(a[0], b[0])
                        || util_1.tocSortCallback(a[1], b[1]);
                });
                today.epub_count = today.epub.length | 0;
                if (!today.epub_count) {
                    delete today.epub;
                    delete today.epub_count;
                }
                else {
                    today.epub.forEach((v, i) => {
                        let novel = this.novel(v[0], v[1]);
                        _list.add(novel);
                        today.epub[i][2] = novel;
                    });
                }
            }
            if (today.segment) {
                array_hyper_unique_1.array_unique(today.segment, {
                    overwrite: true,
                });
                today.segment.sort(function (a, b) {
                    return util_1.tocSortCallback(a[0], b[0])
                        || util_1.tocSortCallback(a[1], b[1]);
                });
                today.segment_count = today.segment.length | 0;
                if (!today.segment_count) {
                    delete today.segment;
                    delete today.segment_count;
                }
                else {
                    today.segment.forEach((v, i) => {
                        let novel = this.novel(v[0], v[1]);
                        _list.add(novel);
                        today.segment[i][2] = novel;
                    });
                }
            }
            if (!Object.keys(today).length) {
                delete this.data.history[timestamp];
            }
            else if (bool > 1) {
                _list.forEach(function (data) {
                    let _a = [
                        data.init_date,
                        data.epub_date,
                        data.segment_date,
                        data.update_date,
                    ]
                        .filter(v => v && v > 0);
                    let old = data.update_date;
                    if (!_a.length || true) {
                        data.update_date = timestamp;
                    }
                    else {
                        data.update_date = _a
                            .reduce((a, b) => {
                            return Math.max(a, b);
                        })
                            || timestamp;
                    }
                    if (old !== data.update_date) {
                        data.update_count = (data.update_count | 0) + 1;
                    }
                });
            }
        }
        let ks = Object.keys(this.data.history);
        if (ks.length) {
            let h = this.data.history;
            ks.forEach(function (k) {
                if (!Object.keys(h[k]).length) {
                    delete h[k];
                }
            });
            if (ks.length > 7) {
                ks.sort().slice(0, -7).forEach(k => delete this.data.history[k]);
            }
        }
        sortObject(this.data, {
            useSource: true,
            keys: [
                'history',
                'novels',
                'mdconf',
            ],
        });
        return this;
    }
    save(bool) {
        fs.outputJSONSync(this.file, this.toJSON(bool || true), {
            spaces: 2,
        });
        return this;
    }
    get timestamp() {
        return todayMoment.valueOf();
    }
    historyPrev() {
        let timestamp = this.timestamp;
        let ks;
        if (timestamp in this.data.history) {
            ks = Object.keys(this.data.history);
            ks.pop();
        }
        else {
            ks = Object.keys(this.data.history);
        }
        let k = ks.pop();
        if (k in this.data.history) {
            return this.data.history[k];
        }
        return null;
    }
    historyToday() {
        let timestamp = this.timestamp;
        let data = this.data.history[timestamp] = this.data.history[timestamp] || {};
        data.epub_count = data.epub_count | 0;
        data.epub = data.epub || [];
        data.segment_count = data.segment_count | 0;
        data.segment = data.segment || [];
        return this.data.history[timestamp];
    }
    static create(options) {
        if (opened) {
            return opened;
        }
        return opened = new this(options);
    }
    toJSON(bool) {
        if (bool) {
            this._beforeSave(bool);
        }
        return this.data;
    }
}
exports.NovelStatCache = NovelStatCache;
function getNovelStatCache() {
    return NovelStatCache.create();
}
exports.getNovelStatCache = getNovelStatCache;
function createMoment(...argv) {
    return moment(...argv).utcOffset(8);
}
exports.createMoment = createMoment;
/*
let c = NovelStatCache.create();

console.dir(c.data, {
    depth: null,
});

let t = c.historyToday();

let n = c.novel('1', '2');

n.chapter = 10;

t.epub.push(['k', 'b']);
t.epub.push(['a', 'b']);

c._beforeSave();

console.dir(c, {
    depth: null,
});

c.save();
*/
//# sourceMappingURL=data:application/json;base64,