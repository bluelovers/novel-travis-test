"use strict";
/**
 * Created by user on 2018/12/17/017.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("@node-novel/toc/lib/util");
const project_config_1 = require("../../project.config");
const path = require("upath2");
const fs = require("fs-extra");
const moment = require("moment");
const array_hyper_unique_1 = require("array-hyper-unique");
const sortObject = require("sort-object-keys2");
let opened;
const todayMoment = moment().startOf('day');
class NovelStatCache {
    /**
     * @deprecated
     */
    constructor(options) {
        this.file = path.join(project_config_1.default.cache_root, 'novel-stat.json');
        this.data = null;
        this.inited = false;
        this.options = options || {};
        this.open();
    }
    open() {
        if (!this.inited) {
            this.inited = true;
            if (fs.pathExistsSync(this.file)) {
                this.data = fs.readJSONSync(this.file);
            }
            else {
                // @ts-ignore
                this.data = {};
            }
            this.data.novels = this.data.novels || {};
            this.data.history = this.data.history || {};
        }
        return this;
    }
    pathMain(pathMain) {
        return this.data.novels[pathMain] = this.data.novels[pathMain] || {};
    }
    novel(pathMain, novelID) {
        this.pathMain(pathMain);
        this.data.novels[pathMain][novelID] = this.data.novels[pathMain][novelID] || {};
        return this.data.novels[pathMain][novelID];
    }
    /**
     * @deprecated
     */
    _beforeSave() {
        let timestamp = this.timestamp;
        if (timestamp in this.data.history) {
            let today = this.data.history[timestamp];
            if (today.epub) {
                array_hyper_unique_1.array_unique(today.epub, {
                    overwrite: true,
                });
                today.epub.sort(function (a, b) {
                    return util_1.tocSortCallback(a[0], b[0])
                        || util_1.tocSortCallback(a[1], b[1]);
                });
                today.epub_count = today.epub.length | 0;
                if (!today.epub_count) {
                    delete today.epub;
                    delete today.epub_count;
                }
            }
            if (today.segment) {
                array_hyper_unique_1.array_unique(today.segment, {
                    overwrite: true,
                });
                today.segment.sort(function (a, b) {
                    return util_1.tocSortCallback(a[0], b[0])
                        || util_1.tocSortCallback(a[1], b[1]);
                });
                today.segment_count = today.segment.length | 0;
                if (!today.segment_count) {
                    delete today.segment;
                    delete today.segment_count;
                }
            }
            if (!Object.keys(today).length) {
                delete this.data.history[timestamp];
            }
        }
        let ks = Object.keys(this.data.history);
        if (ks.length) {
            let h = this.data.history;
            ks.forEach(function (k) {
                if (!Object.keys(h[k]).length) {
                    delete h[k];
                }
            });
            if (ks.length > 7) {
                ks.sort().slice(0, -7).forEach(k => delete this.data.history[k]);
            }
        }
        sortObject(this.data, {
            useSource: true,
            keys: [
                'history',
                'novels',
            ],
        });
        return this;
    }
    save() {
        fs.outputJSONSync(this.file, this.toJSON(true));
        return this;
    }
    get timestamp() {
        return todayMoment.unix();
    }
    historyPrev() {
        let timestamp = this.timestamp;
        let ks;
        if (timestamp in this.data.history) {
            ks = Object.keys(this.data.history);
            ks.pop();
        }
        else {
            ks = Object.keys(this.data.history);
        }
        let k = ks.pop();
        if (k in this.data.history) {
            return this.data.history[k];
        }
        return null;
    }
    historyToday() {
        let timestamp = this.timestamp;
        let data = this.data.history[timestamp] = this.data.history[timestamp] || {};
        data.epub_count = data.epub_count | 0;
        data.epub = data.epub || [];
        data.segment_count = data.segment_count | 0;
        data.segment = data.segment || [];
        return this.data.history[timestamp];
    }
    static create(options) {
        if (opened) {
            return opened;
        }
        return opened = new this(options);
    }
    toJSON(bool) {
        if (bool) {
            this._beforeSave();
        }
        return this.data;
    }
}
exports.NovelStatCache = NovelStatCache;
function getNovelStatCache() {
    return NovelStatCache.create();
}
exports.getNovelStatCache = getNovelStatCache;
/*
let c = NovelStatCache.create();

console.dir(c.data, {
    depth: null,
});

let t = c.historyToday();

let n = c.novel('1', '2');

n.chapter = 10;

t.epub.push(['k', 'b']);
t.epub.push(['a', 'b']);

c._beforeSave();

console.dir(c, {
    depth: null,
});

c.save();
*/
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm92ZWwtc3RhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5vdmVsLXN0YXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILG1EQUEyRDtBQUMzRCx5REFBaUQ7QUFDakQsK0JBQWdDO0FBQ2hDLCtCQUFnQztBQUNoQyxpQ0FBa0M7QUFDbEMsMkRBQWtEO0FBRWxELGdEQUFpRDtBQUVqRCxJQUFJLE1BQXNCLENBQUM7QUFDM0IsTUFBTSxXQUFXLEdBQUcsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBMkM1QyxNQUFhLGNBQWM7SUFRMUI7O09BRUc7SUFDSCxZQUFZLE9BQWdDO1FBVDVDLFNBQUksR0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUFhLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDdEUsU0FBSSxHQUFvQixJQUFJLENBQUM7UUFHN0IsV0FBTSxHQUFZLEtBQUssQ0FBQztRQU92QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFFN0IsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2IsQ0FBQztJQUVTLElBQUk7UUFFYixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFDaEI7WUFDQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUVuQixJQUFJLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUNoQztnQkFDQyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3ZDO2lCQUVEO2dCQUNDLGFBQWE7Z0JBQ2IsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7YUFDZjtZQUVELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztZQUMx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QUksQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1FBRWxDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBZ0M7UUFFN0MsSUFBSSxNQUFNLEVBQ1Y7WUFDQyxPQUFPLE1BQU0sQ0FBQztTQUNkO1FBRUQsT0FBTyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFjO1FBRXBCLElBQUksSUFBSSxFQUNSO1lBQ0MsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO1NBQ2xCO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2xCLENBQUM7Q0FFRDtBQXpORCx3Q0F5TkM7QUFFRCxTQUFnQixpQkFBaUI7SUFFaEMsT0FBTyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDaEMsQ0FBQztBQUhELDhDQUdDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBdUJFIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC8xMi8xNy8wMTcuXG4gKi9cblxuaW1wb3J0IHsgdG9jU29ydENhbGxiYWNrIH0gZnJvbSAnQG5vZGUtbm92ZWwvdG9jL2xpYi91dGlsJztcbmltcG9ydCBQcm9qZWN0Q29uZmlnIGZyb20gJy4uLy4uL3Byb2plY3QuY29uZmlnJztcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgndXBhdGgyJyk7XG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuaW1wb3J0IHsgYXJyYXlfdW5pcXVlIH0gZnJvbSAnYXJyYXktaHlwZXItdW5pcXVlJztcbmltcG9ydCB7IGRlZmF1bHRTb3J0Q2FsbGJhY2sgfSBmcm9tICdAbm9kZS1ub3ZlbC9zb3J0JztcbmltcG9ydCBzb3J0T2JqZWN0ID0gcmVxdWlyZSgnc29ydC1vYmplY3Qta2V5czInKTtcblxubGV0IG9wZW5lZDogTm92ZWxTdGF0Q2FjaGU7XG5jb25zdCB0b2RheU1vbWVudCA9IG1vbWVudCgpLnN0YXJ0T2YoJ2RheScpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElOb3ZlbFN0YXRDYWNoZVxue1xuXHRub3ZlbHM6IHtcblx0XHRbcGF0aE1haW46IHN0cmluZ106IHtcblx0XHRcdFtub3ZlbElEOiBzdHJpbmddOiBJTm92ZWxTdGF0Q2FjaGVOb3ZlbCxcblx0XHR9LFxuXHR9LFxuXG5cdGhpc3Rvcnk6IHtcblx0XHRbZGF0ZTogc3RyaW5nXTogSU5vdmVsU3RhdENhY2hlSGlzdG9yeSxcblx0XHRbZGF0ZTogbnVtYmVyXTogSU5vdmVsU3RhdENhY2hlSGlzdG9yeSxcblx0fSxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTm92ZWxTdGF0Q2FjaGVOb3ZlbFxue1xuXHRzZWdtZW50X2RhdGU/OiBudW1iZXIsXG5cdGVwdWJfZGF0ZT86IG51bWJlcixcblx0dm9sdW1lPzogbnVtYmVyLFxuXHRjaGFwdGVyPzogbnVtYmVyLFxuXG5cdHZvbHVtZV9vbGQ/OiBudW1iZXIsXG5cdGNoYXB0ZXJfb2xkPzogbnVtYmVyLFxuXG5cdHNlZ21lbnQ/OiBudW1iZXIsXG5cdHNlZ21lbnRfb2xkPzogbnVtYmVyLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElOb3ZlbFN0YXRDYWNoZUhpc3Rvcnlcbntcblx0ZXB1Yl9jb3VudD86IG51bWJlcixcblx0ZXB1Yj86IEFycmF5PFtzdHJpbmcsIHN0cmluZ10+LFxuXHRzZWdtZW50X2NvdW50PzogbnVtYmVyLFxuXHRzZWdtZW50PzogQXJyYXk8W3N0cmluZywgc3RyaW5nXT4sXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU5vdmVsU3RhdENhY2hlT3B0aW9uc1xue1xuXG59XG5cbmV4cG9ydCBjbGFzcyBOb3ZlbFN0YXRDYWNoZVxue1xuXHRmaWxlOiBzdHJpbmcgPSBwYXRoLmpvaW4oUHJvamVjdENvbmZpZy5jYWNoZV9yb290LCAnbm92ZWwtc3RhdC5qc29uJyk7XG5cdGRhdGE6IElOb3ZlbFN0YXRDYWNoZSA9IG51bGw7XG5cdG9wdGlvbnM6IElOb3ZlbFN0YXRDYWNoZU9wdGlvbnM7XG5cblx0aW5pdGVkOiBib29sZWFuID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zPzogSU5vdmVsU3RhdENhY2hlT3B0aW9ucylcblx0e1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR0aGlzLm9wZW4oKTtcblx0fVxuXG5cdHByb3RlY3RlZCBvcGVuKClcblx0e1xuXHRcdGlmICghdGhpcy5pbml0ZWQpXG5cdFx0e1xuXHRcdFx0dGhpcy5pbml0ZWQgPSB0cnVlO1xuXG5cdFx0XHRpZiAoZnMucGF0aEV4aXN0c1N5bmModGhpcy5maWxlKSlcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5kYXRhID0gZnMucmVhZEpTT05TeW5jKHRoaXMuZmlsZSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0dGhpcy5kYXRhID0ge307XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZGF0YS5ub3ZlbHMgPSB0aGlzLmRhdGEubm92ZWxzIHx8IHt9O1xuXHRcdFx0dGhpcy5kYXRhLmhpc3RvcnkgPSB0aGlzLmRhdGEuaGlzdG9yeSB8fCB7fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHBhdGhNYWluKHBhdGhNYWluOiBzdHJpbmcpXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5kYXRhLm5vdmVsc1twYXRoTWFpbl0gPSB0aGlzLmRhdGEubm92ZWxzW3BhdGhNYWluXSB8fCB7fTtcblx0fVxuXG5cdG5vdmVsKHBhdGhNYWluOiBzdHJpbmcsIG5vdmVsSUQ6IHN0cmluZylcblx0e1xuXHRcdHRoaXMucGF0aE1haW4ocGF0aE1haW4pO1xuXG5cdFx0dGhpcy5kYXRhLm5vdmVsc1twYXRoTWFpbl1bbm92ZWxJRF0gPSB0aGlzLmRhdGEubm92ZWxzW3BhdGhNYWluXVtub3ZlbElEXSB8fCB7fTtcblxuXHRcdHJldHVybiB0aGlzLmRhdGEubm92ZWxzW3BhdGhNYWluXVtub3ZlbElEXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAZGVwcmVjYXRlZFxuXHQgKi9cblx0X2JlZm9yZVNhdmUoKVxuXHR7XG5cdFx0bGV0IHRpbWVzdGFtcCA9IHRoaXMudGltZXN0YW1wO1xuXG5cdFx0aWYgKHRpbWVzdGFtcCBpbiB0aGlzLmRhdGEuaGlzdG9yeSlcblx0XHR7XG5cdFx0XHRsZXQgdG9kYXkgPSB0aGlzLmRhdGEuaGlzdG9yeVt0aW1lc3RhbXBdO1xuXG5cdFx0XHRpZiAodG9kYXkuZXB1Yilcblx0XHRcdHtcblx0XHRcdFx0YXJyYXlfdW5pcXVlKHRvZGF5LmVwdWIsIHtcblx0XHRcdFx0XHRvdmVyd3JpdGU6IHRydWUsXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHRvZGF5LmVwdWIuc29ydChmdW5jdGlvbiAoYSwgYilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJldHVybiB0b2NTb3J0Q2FsbGJhY2soYVswXSwgYlswXSlcblx0XHRcdFx0XHR8fCB0b2NTb3J0Q2FsbGJhY2soYVsxXSwgYlsxXSlcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dG9kYXkuZXB1Yl9jb3VudCA9IHRvZGF5LmVwdWIubGVuZ3RoIHwgMDtcblxuXHRcdFx0XHRpZiAoIXRvZGF5LmVwdWJfY291bnQpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRkZWxldGUgdG9kYXkuZXB1Yjtcblx0XHRcdFx0XHRkZWxldGUgdG9kYXkuZXB1Yl9jb3VudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAodG9kYXkuc2VnbWVudClcblx0XHRcdHtcblx0XHRcdFx0YXJyYXlfdW5pcXVlKHRvZGF5LnNlZ21lbnQsIHtcblx0XHRcdFx0XHRvdmVyd3JpdGU6IHRydWUsXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHRvZGF5LnNlZ21lbnQuc29ydChmdW5jdGlvbiAoYSwgYilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJldHVybiB0b2NTb3J0Q2FsbGJhY2soYVswXSwgYlswXSlcblx0XHRcdFx0XHRcdHx8IHRvY1NvcnRDYWxsYmFjayhhWzFdLCBiWzFdKVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHR0b2RheS5zZWdtZW50X2NvdW50ID0gdG9kYXkuc2VnbWVudC5sZW5ndGggfCAwO1xuXG5cdFx0XHRcdGlmICghdG9kYXkuc2VnbWVudF9jb3VudClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGRlbGV0ZSB0b2RheS5zZWdtZW50O1xuXHRcdFx0XHRcdGRlbGV0ZSB0b2RheS5zZWdtZW50X2NvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICghT2JqZWN0LmtleXModG9kYXkpLmxlbmd0aClcblx0XHRcdHtcblx0XHRcdFx0ZGVsZXRlIHRoaXMuZGF0YS5oaXN0b3J5W3RpbWVzdGFtcF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bGV0IGtzID0gT2JqZWN0LmtleXModGhpcy5kYXRhLmhpc3RvcnkpO1xuXG5cdFx0aWYgKGtzLmxlbmd0aClcblx0XHR7XG5cdFx0XHRsZXQgaCA9IHRoaXMuZGF0YS5oaXN0b3J5O1xuXG5cdFx0XHRrcy5mb3JFYWNoKGZ1bmN0aW9uIChrKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoIU9iamVjdC5rZXlzKGhba10pLmxlbmd0aClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGRlbGV0ZSBoW2tdO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKGtzLmxlbmd0aCA+IDcpXG5cdFx0XHR7XG5cdFx0XHRcdGtzLnNvcnQoKS5zbGljZSgwLCAtNykuZm9yRWFjaChrID0+IGRlbGV0ZSB0aGlzLmRhdGEuaGlzdG9yeVtrXSlcblx0XHRcdH1cblx0XHR9XG5cblx0XHRzb3J0T2JqZWN0KHRoaXMuZGF0YSwge1xuXHRcdFx0dXNlU291cmNlOiB0cnVlLFxuXHRcdFx0a2V5czogW1xuXHRcdFx0XHQnaGlzdG9yeScsXG5cdFx0XHRcdCdub3ZlbHMnLFxuXHRcdFx0XSxcblx0XHR9KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHVibGljIHNhdmUoKVxuXHR7XG5cdFx0ZnMub3V0cHV0SlNPTlN5bmModGhpcy5maWxlLCB0aGlzLnRvSlNPTih0cnVlKSk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdGdldCB0aW1lc3RhbXAoKVxuXHR7XG5cdFx0cmV0dXJuIHRvZGF5TW9tZW50LnVuaXgoKTtcblx0fVxuXG5cdGhpc3RvcnlQcmV2KClcblx0e1xuXHRcdGxldCB0aW1lc3RhbXAgPSB0aGlzLnRpbWVzdGFtcDtcblxuXHRcdGxldCBrczogc3RyaW5nW107XG5cblx0XHRpZiAodGltZXN0YW1wIGluIHRoaXMuZGF0YS5oaXN0b3J5KVxuXHRcdHtcblx0XHRcdGtzID0gT2JqZWN0LmtleXModGhpcy5kYXRhLmhpc3RvcnkpO1xuXHRcdFx0a3MucG9wKCk7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRrcyA9IE9iamVjdC5rZXlzKHRoaXMuZGF0YS5oaXN0b3J5KTtcblx0XHR9XG5cblx0XHRsZXQgayA9IGtzLnBvcCgpO1xuXG5cdFx0aWYgKGsgaW4gdGhpcy5kYXRhLmhpc3RvcnkpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIHRoaXMuZGF0YS5oaXN0b3J5W2tdO1xuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0aGlzdG9yeVRvZGF5KClcblx0e1xuXHRcdGxldCB0aW1lc3RhbXAgPSB0aGlzLnRpbWVzdGFtcDtcblxuXHRcdGxldCBkYXRhID0gdGhpcy5kYXRhLmhpc3RvcnlbdGltZXN0YW1wXSA9IHRoaXMuZGF0YS5oaXN0b3J5W3RpbWVzdGFtcF0gfHwge307XG5cblx0XHRkYXRhLmVwdWJfY291bnQgPSBkYXRhLmVwdWJfY291bnQgfCAwO1xuXHRcdGRhdGEuZXB1YiA9IGRhdGEuZXB1YiB8fCBbXTtcblxuXHRcdGRhdGEuc2VnbWVudF9jb3VudCA9IGRhdGEuc2VnbWVudF9jb3VudCB8IDA7XG5cdFx0ZGF0YS5zZWdtZW50ID0gZGF0YS5zZWdtZW50IHx8IFtdO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5oaXN0b3J5W3RpbWVzdGFtcF07XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlKG9wdGlvbnM/OiBJTm92ZWxTdGF0Q2FjaGVPcHRpb25zKVxuXHR7XG5cdFx0aWYgKG9wZW5lZClcblx0XHR7XG5cdFx0XHRyZXR1cm4gb3BlbmVkO1xuXHRcdH1cblxuXHRcdHJldHVybiBvcGVuZWQgPSBuZXcgdGhpcyhvcHRpb25zKTtcblx0fVxuXG5cdHRvSlNPTihib29sPzogYm9vbGVhbilcblx0e1xuXHRcdGlmIChib29sKVxuXHRcdHtcblx0XHRcdHRoaXMuX2JlZm9yZVNhdmUoKVxuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5kYXRhO1xuXHR9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5vdmVsU3RhdENhY2hlKClcbntcblx0cmV0dXJuIE5vdmVsU3RhdENhY2hlLmNyZWF0ZSgpO1xufVxuXG4vKlxubGV0IGMgPSBOb3ZlbFN0YXRDYWNoZS5jcmVhdGUoKTtcblxuY29uc29sZS5kaXIoYy5kYXRhLCB7XG5cdGRlcHRoOiBudWxsLFxufSk7XG5cbmxldCB0ID0gYy5oaXN0b3J5VG9kYXkoKTtcblxubGV0IG4gPSBjLm5vdmVsKCcxJywgJzInKTtcblxubi5jaGFwdGVyID0gMTA7XG5cbnQuZXB1Yi5wdXNoKFsnaycsICdiJ10pO1xudC5lcHViLnB1c2goWydhJywgJ2InXSk7XG5cbmMuX2JlZm9yZVNhdmUoKTtcblxuY29uc29sZS5kaXIoYywge1xuXHRkZXB0aDogbnVsbCxcbn0pO1xuXG5jLnNhdmUoKTtcbiovXG4iXX0=